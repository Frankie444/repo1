<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<Manifest>
    <Identity>
        <ID>SampleA.Discovery.PowerShell.WithParam</ID>
        <Version>1.0.0.12</Version>
    </Identity>
    <Name>SampleA.Discovery.PowerShell.WithParam</Name>
    <References>
    <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
    </Reference>
    <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
    </Reference>
    <Reference Alias="SystemCenter">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
    </Reference>
    </References>
</Manifest>
<TypeDefinitions>
    <EntityTypes>
    <ClassTypes>
    <ClassType ID="SampleA.Discovery.PowerShell.WithParam.Class" Base="Windows!Microsoft.Windows.LocalApplication" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
    <Property ID="FolderExists" Type="string"/>
    </ClassType>
    </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
    <DataSourceModuleType ID="SampleA.Discovery.PowerShell.WithParam.Discovery.DataSourceModule" Accessibility="Internal" Batching="false">
    <Configuration>
    <xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    <xsd:element name="IgnoreFolder" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
    </Configuration>
    <OverrideableParameters>
    <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
    <OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
    <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
    <OverrideableParameter ID="IgnoreFolder" Selector="$Config/IgnoreFolder$" ParameterType="string" />
    </OverrideableParameters>
    <ModuleImplementation Isolation="Any">
    <Composite>
    <MemberModules>
    <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
    <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
    <SyncTime>$Config/SyncTime$</SyncTime>
    <ScriptName>SampleA.Discovery.PowerShell.WithParam.Discovery.ps1</ScriptName>
    <ScriptBody><![CDATA[
    Param ($SourceId,$ManagedEntityId,$ComputerName,$IgnoreFolder) # Need this to pass params in properly. This is needed.
    <#**************************************** LOG & QUIT ****************************************#>
    Function LogAndQuit {
    If ($script:CountWarning -gt 0) {
    $EventId=17611
    $EventLevel=2
    } Else {
    $EventId=17610
    $EventLevel=0
    }
    # Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
    $MomApi.LogScriptEvent("SampleA.Discovery.PowerShell.WithParam.Discovery.ps1", $EventId, $EventLevel, "Folder discovery script executed.`rWorkflow Name: SampleA.Discovery.PowerShell.WithParam.Discovery`rManagement Pack: SampleA.Discovery.PowerShell.WithParam (1.0.0.12)`rFolder exists: $FolderExists`rParam: $IgnoreFolder`r$Error") # The $Error here will dump any errors into the event, don't know if we need it yet.
    }
    <#**************************************** CHECK FOLDERS ****************************************#>
    Function CheckFolder {
    $ErrorActionPreference="Continue"
    $MomApi=New-Object -comObject 'MOM.ScriptAPI'
    $DiscoveryData=$MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId)
    $Folder="C:\temp\Anthony\Folder1"
    If(Test-Path -Path $Folder) {$FolderExists="Yes"}
    If($IgnoreFolder="Yes") {
        $FolderExists="Yes, Ignored"
    } else {
    $FolderExists="No"
    $script:CountWarning+=1
    }
    $Instance=$DiscoveryData.CreateClassInstance("$MPElement[Name='SampleA.Discovery.PowerShell.WithParam.Class']$")
    $Instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
    $Instance.AddProperty("$MPElement[Name='SampleA.Discovery.PowerShell.WithParam.Class']/FolderExists$", $FolderExists)
    $Instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
    $DiscoveryData.AddInstance($Instance)
    $DiscoveryData
    LogAndQuit
    }
    CheckFolder -SourceId $SourceId -ManagedEntityId $ManagedEntityId -ComputerName $ComputerName -IgnoreFolder $IgnoreFolder
    ]]>
    </ScriptBody>
    <Parameters>
    <Parameter>
    <Name>SourceId</Name>
    <Value>$MPElement$</Value>
    </Parameter>
    <Parameter>
    <Name>ManagedEntityId</Name>
    <Value>$Target/Id$</Value>
    </Parameter>
    <Parameter>
    <Name>ComputerName</Name>
    <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
    </Parameter>
    <Parameter>
    <Name>IgnoreFolder</Name>
    <Value>$Config/IgnoreFolder$</Value>
    </Parameter>
    </Parameters>
    <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
    </DataSource>
    </MemberModules>
    <Composition>
    <Node ID="DS" />
    </Composition>
    </Composite>
    </ModuleImplementation>
    <OutputType>System!System.Discovery.Data</OutputType>
    </DataSourceModuleType>
    </ModuleTypes>
</TypeDefinitions>
<Monitoring>
<Discoveries>
    <Discovery ID="SampleA.Discovery.PowerShell.WithParam.Discovery" Target="SystemCenter!Microsoft.SystemCenter.ManagementServer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
    <Category>Discovery</Category>
    <DiscoveryTypes>
    <DiscoveryClass TypeID="SampleA.Discovery.PowerShell.WithParam.Class">
    <Property PropertyID="FolderExists"/>
    </DiscoveryClass>
    </DiscoveryTypes>
    <DataSource ID="DS" TypeID="SampleA.Discovery.PowerShell.WithParam.Discovery.DataSourceModule">
    <IntervalSeconds>60</IntervalSeconds>
    <SyncTime></SyncTime>
    <TimeoutSeconds>120</TimeoutSeconds>
    <IgnoreFolder>Type Yes/No</IgnoreFolder>
    </DataSource>
    </Discovery>
</Discoveries>
</Monitoring>
<LanguagePacks>
<LanguagePack ID="ENU" IsDefault="true">
<DisplayStrings>
<DisplayString ElementID="SampleA.Discovery.PowerShell.WithParam.Class">
<Name>SampleA.Discovery.PowerShell.WithParam.Class</Name>
</DisplayString>
<DisplayString ElementID="SampleA.Discovery.PowerShell.WithParam.Class" SubElementID="FolderExists">
<Name>Folder Exists</Name>
</DisplayString>
<DisplayString ElementID="SampleA.Discovery.PowerShell.WithParam.Discovery">
<Name>SampleA.Discovery.PowerShell.WithParam.Discovery</Name>
</DisplayString>
</DisplayStrings>
</LanguagePack>
</LanguagePacks>
</ManagementPack>  