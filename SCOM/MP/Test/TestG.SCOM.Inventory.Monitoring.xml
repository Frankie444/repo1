<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
<Manifest>
<Identity>
<ID>TestG.SCOM.Inventory.Monitoring</ID>
<Version>1.0.0.23</Version>
</Identity>
<Name>TestG.SCOM.Inventory.Monitoring</Name>
<References>
<Reference Alias="Windows">
<ID>Microsoft.Windows.Library</ID>
<Version>7.5.8501.0</Version>
<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
</Reference>
<Reference Alias="System">
<ID>System.Library</ID>
<Version>7.5.8501.0</Version>
<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
</Reference>
<Reference Alias="SystemCenter">
<ID>Microsoft.SystemCenter.Library</ID>
<Version>7.0.8433.0</Version>
<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
</Reference>
<Reference Alias="Health">
<ID>System.Health.Library</ID>
<Version>7.0.8433.0</Version>
<PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
</Reference>
</References>
</Manifest>
<TypeDefinitions>
<EntityTypes>
<ClassTypes>

<!--WINDOWS CLASS-->
<ClassType ID="TestG.SCOM.Inventory.Windows.Class" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false">
<Property ID="OperatingSystem" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="Product" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="AgentInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="AgentURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="AgentVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="MGCount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="MGFailovers" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="HealthServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="HealthServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="CertificateExpiryDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ADIntegration" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="APMInstalled" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="APMServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="APMServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSForwarderServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSForwarderServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="TLS12" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="LAWorkspaceCount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="LAWorkspaces" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="LAProxyUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="LAProxyUsername" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ComputerType" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="MgmtServerInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="MgmtServerURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="MgmtServerVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ConfigServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ConfigServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="DataAccessServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="DataAccessServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="OpsDbName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="OpsDbServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="DWDbName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="DwDbServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSCollector" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSCollectorServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSCollectorServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSCollectorURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ACSCollectorVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="RMS" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="GatewayServerInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="GatewayServerURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="GatewayServerVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="WebConsoleInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="WebConsoleURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="WebConsoleVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="AuthenticationMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="DefaultServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="WebConsoleUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ApmAdvisorUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ApmDiagnosticsUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerDwDbServer" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerDWDBName" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerUrl" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="SRSInstance" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerServiceAccount" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ReportServerServiceStartMode" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ConsoleVersion" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ConsoleInstallDirectory" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
<Property ID="ConsoleURInstallDate" Type="string" AutoIncrement="false" Key="false" CaseSensitive="false" MaxLength="256" MinLength="0" Required="false" Scale="0" />
</ClassType>
</ClassTypes>



</EntityTypes>
<ModuleTypes>

<!--WINDOWS DISCOVERY DSM-->
<DataSourceModuleType ID="TestG.SCOM.Inventory.Discovery.WindowsDataSource" Accessibility="Internal" Batching="false">
<Configuration>
<xsd:element name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
<xsd:element name="SyncTime" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
<xsd:element name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
<xsd:element name="IgnoreMgmtGroups" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
<xsd:element name="IgnoreAgentVersion" type="xsd:boolean" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
</Configuration>
<OverrideableParameters>
<OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
<OverrideableParameter ID="SyncTime" Selector="$Config/SyncTime$" ParameterType="string" />
<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
<OverrideableParameter ID="IgnoreMgmtGroups" Selector="$Config/IgnoreMgmtGroups$" ParameterType="string" />
<OverrideableParameter ID="IgnoreAgentVersion" Selector="$Config/IgnoreAgentVersion$" ParameterType="bool" />
</OverrideableParameters>
<ModuleImplementation Isolation="Any">
<Composite>
<MemberModules>
<DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
<IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
<SyncTime>$Config/SyncTime$</SyncTime>
<ScriptName>TestG.SCOM.Inventory.Discovery.WindowsDataSource.ps1</ScriptName>
<ScriptBody><![CDATA[
# Start Windows discovery
Param ($SourceId,$ManagedEntityId,$ComputerName,$IgnoreMgmtGroups,$IgnoreAgentVersion) # Need this to pass params in properly.

<#**************************************** LOG & QUIT ****************************************#>
Function LogAndQuit {
If ($Script:CountError -gt 0) {
$EventId=17611
$EventLevel=2
}
Else {
$Script:CountError=0 # if no errors set this value so it appears in the event.
$EventId=17610
$EventLevel=0
}
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$ObjMomApi.LogScriptEvent("TestG.SCOMWindowsInventory.ps1", $EventId, $EventLevel, "Windows inventory discovery script executed.`nWorkflow Name: TestG.SCOM.Inventory.Windows.ScriptDiscovery`nManagement Pack: TestG.SCOM.Inventory.Monitoring (1.0.0.23)`nPowerShell Version: $PSVersion`nIssues Detected: $Script:CountError`n$Script:Message") # The $Error here will dump any errors into the event, don't know if we need it yet.
}

<#**************************************** CHECK NULLS ****************************************#>
Function CheckNull ($PassedInParam) {
If ([string]::IsNullOrEmpty($PassedInParam)) {
$Script:IsItNull=$True # update this so it can be used for decisions if necessary.
If ($ValueToCheck -eq "LAProxyUrl") { # This If statement allows us to do custom things when an empty value is not considered an error.
$Script:LAProxyUrl="n/a"
}
ElseIf ($ValueToCheck -eq "LAProxyUsername") {
$Script:LAProxyUsername="n/a"
}
Else {
$Script:CountError+=1
$Script:Message+="[CODE_SECTION_$CodeSection] $ValueToCheck is empty. Error output: ($Error)`n"
}
}
Else {
$Script:IsItNull=$False # update this so it can be used for decisions if necessary.
}
# Write-Host "Variable: $ValueToCheck IsItNull: $IsItNull"
}

<#**************************************** TERMINATING ERROR ****************************************#>
Function TerminatingError
{
$script:CountError+=1
$script:Message+="[ISSUE] A terminating error occurred in Code Section $CodeSection. Error output: (" + $_.Exception.Message + ")`n"
LogAndQuit
}

<#**************************************** GET SERVICE INFO ****************************************#>
Function GetServiceInfo ($PassedInParam){
$Script:ServiceAccount=$null; $Script:ServiceStartMode=$null # reset these.
$Script:ServiceAccount=(Get-ItemProperty $PassedInParam).ObjectName
$ValueToCheck="ServiceAccount"; CheckNull $ServiceAccount # Expect a value so check it.
$Script:ServiceStartMode=(Get-ItemProperty $PassedInParam).Start
$ValueToCheck="ServiceStartMode"; CheckNull $Script:ServiceStartMode # Expect a value so check it.
If ($Script:IsItNull -ne $True) { # 
Switch ($Script:ServiceStartMode) {
"2" {$Script:ServiceStartMode="Automatic"; BREAK}
"3" {$Script:ServiceStartMode="Manual"; BREAK}
"4" {$Script:ServiceStartMode="Disabled"; BREAK}
}
}
}

<#**************************************** GET WINDOWS INVENTORY ****************************************#>
Function GetWindowsInventory {
$ErrorActionPreference="Continue"
Try {
<# FOR TESTING
$SourceId='{00000000-0000-0000-0000-000000000000}'
$ManagedEntityId='{00000000-0000-0000-0000-000000000000}'
$ComputerName='M12.scomtest.local'
$IgnoreMgmtGroups="" # this is what will get passed in by the override.
$IgnoreAgentVersion="false"
#>

<# CODE_SECTION_1
Load objects that let us get the job done.
#>
$CodeSection="1"
$ObjMomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$ObjMomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId) # Create MOMDiscoveryData object to store discovery data.
$ObjAgentConfig=New-Object -ComObject "AgentConfigManager.MgmtSvcCfg" # Agent config API object.

<# CODE_SECTION_2.
Get powershell version. This is shown in events to assist troubleshooting when powershell doesn't play nice.
#>
$CodeSection="2"
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
$PSVersion=$PSMajor + "." + $PSMinor

<# CODE_SECTION_3
Set common variables.
#>
$CodeSection="3"
$ComputerFqdn=([System.Net.Dns]::GetHostByName(($env:computerName))).Hostname
$WinDir=(Get-ChildItem Env:windir).Value

<# CODE_SECTION_4
Get operating system.
#>
$CodeSection="4"
$OperatingSystem=(Get-CimInstance -ClassName Win32_OperatingSystem).Caption
$ValueToCheck="OperatingSystem"; CheckNull $OperatingSystem # Expect a value so check it.

<# CODE_SECTION_5
Determine if it's an agent, management server or gateway server. Don't check nulls, the fact the script runs means the reg part exists.
This gives a rough idea of the role but it's not ideal, it may be confusing coz it will only show if it's agent, management server or gateway server.
#>
$CodeSection="5"
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
$Product=(Get-ItemProperty $SetupRegKey).Product

<# CODE_SECTION_6
Get agent install directory.
#>
$CodeSection="6"
If((Get-ItemProperty $SetupRegKey).AgentVersion) { # START GET AGENT-SPECIFIC SETTINGS. *********************************************************************************

$AgentInstallDirectory=(Get-ItemProperty $SetupRegKey).InstallDirectory.TrimEnd("\")
$ValueToCheck="AgentInstallDirectory"; CheckNull $AgentInstallDirectory # Expect a value so check it.

<# CODE_SECTION_7
Get agent UR install date.
#>
$CodeSection="7"
$AgentURFile=Get-Item $AgentInstallDirectory\Tools\TMF\OMAgentTraceTMFVer.Dll # use this file to id update rollup info.
$AgentURInstallDate=$AgentURFile.LastAccessTime.ToString("yyyy-MM-dd") # use this to determine when update rollup was installed.
$ValueToCheck="AgentURInstallDate"; CheckNull $AgentURInstallDate # Expect a value so check it.

<# CODE_SECTION_8
Get agent UR version.
There are 4 possible outcomes to check for in this order:
1 - Emtpy value
2 - A match is found in the switch block (expected)
3 - Overridden
4 - Unknown version
#>
$CodeSection="8"
$AgentVersion=$AgentURFile.VersionInfo.FileVersion
$ValueToCheck="AgentVersion"; CheckNull $AgentVersion # # Check 1. If it's empty generate error and continue.
If ($Script:IsItNull -ne $True) { # Check 2. Is there an existing match?
Switch($AgentVersion) {
# SCOM 2012 R2
"7.1.10184.0" {$AgentVersion="7.1.10184.0 (2012 R2 RTM)"; BREAK}
"7.1.10195.0" {$AgentVersion="7.1.10195.0 (2012 R2 UR2)"; BREAK}
"7.1.10204.0" {$AgentVersion="7.1.10204.0 (2012 R2 UR3)"; BREAK}
"7.1.10211.0" {$AgentVersion="7.1.10211.0 (2012 R2 UR4)"; BREAK}
"7.1.10213.0" {$AgentVersion="7.1.10213.0 (2012 R2 UR5)"; BREAK}
"7.1.10218.0" {$AgentVersion="7.1.10218.0 (2012 R2 UR6)"; BREAK}
"7.1.10229.0" {$AgentVersion="7.1.10229.0 (2012 R2 UR7)"; BREAK}
"7.1.10241.0" {$AgentVersion="7.1.10241.0 (2012 R2 UR8)"; BREAK}
"7.1.10268.0" {$AgentVersion="7.1.10268.0 (2012 R2 UR9)"; BREAK}
"7.1.10285.0" {$AgentVersion="7.1.10285.0 (2012 R2 UR11)"; BREAK}
"7.1.10292.0" {$AgentVersion="7.1.10292.0 (2012 R2 UR12)"; BREAK}
"7.1.10302.0" {$AgentVersion="7.1.10302.0 (2012 R2 UR13)"; BREAK}
"7.1.10305.0" {$AgentVersion="7.1.10305.0 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$AgentVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10931.0" {$AgentVersion="8.0.10931.0 (2016 UR1)"; BREAK}
"8.0.10949.0" {$AgentVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$AgentVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$AgentVersion="8.0.10977.0 (2016 UR4)"; BREAK}
"8.0.10990.0" {$AgentVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$AgentVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$AgentVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$AgentVersion="8.0.11037.0 (2016 UR8)"; BREAK}
"8.0.11049.0" {$AgentVersion="8.0.11049.0 (2016 UR9)"; BREAK}
# SEMI ANNUAL Channel
"8.0.13053.0" {$AgentVersion="8.0.13053.0 (1801)"; BREAK}
"8.0.13067.0" {$AgentVersion="8.0.13067.0 (1807)"; BREAK}
# SCOM 2019
"10.19.10003.0" {$AgentVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$AgentVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$AgentVersion="10.19.10140.0 (2019 UR1)"; BREAK}
Default {
If ($IgnoreAgentVersion -eq $True) { # Check 3. If there's an override append "(OverrideIgnore)" to the version.
$AgentVersion="$AgentVersion (OverrideIgnore)"      
}
Else {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown agent version: $AgentVersion.`n";
$Script:CountError+=1
$AgentVersion="$AgentVersion (Unknown)"  
}
}
}
}

<# CODE_SECTION_9
Get management groups.
Description: Don't need to check $Primary for nulls. The fact the script runs means it's working.
We do however check for the number of failover servers returned. If it's 0 we alert on it.
#>
$CodeSection="9"
$IgnoreMgmtGroups=$IgnoreMgmtGroups.Split(",") # split into array so we can check each item.
$MGFolders=Get-ChildItem -Directory -Path "$AgentInstallDirectory\Health Service State\Connector Configuration Cache" # get folders only.
$MGCount=($MGFolders | Measure-Object).Count # here's your MGCount property
$MGFolders | ForEach-Object {
$MGName=$_.Name
$AgentConfigFile="$AgentInstallDirectory\Health Service State\Connector Configuration Cache\$MGName\OpsMgrConnector.Config.xml"
If (Test-Path -Path $AgentConfigFile) {
$XPath="Message/State/Parents/Added/Item" # Set the XPath. This is where you'll find primary/failover server info.
$GetPrimaryXml=Select-Xml -Path $AgentConfigFile -XPath $XPath | Select-Object -ExpandProperty node | Where-Object {$_.IsPrimary -eq "True"}
$Primary=$GetPrimaryXml.AuthenticationName # Don't check validity. For this to run it means it's communicating with it's primary server properly.
$MGOverride=$IgnoreMgmtGroups -contains $MGName
If ($MGOverride -eq $True) { # if overriden loop to next.
$MGFailovers+="MGName=" + $MGName + ",Primary=$Primary,Failovers=OverrideIgnore;"
}
Else { # get failovers.
$Failovers=$null # reset to avoid weirdness.
$GetFailoverXml=Select-Xml -Path $AgentConfigFile -XPath $XPath | Select-Object -ExpandProperty node | Where-Object {$_.IsPrimary -eq "False"} | Sort-Object AuthenticationName # array of failovers.
If (($GetFailoverXml | Measure-Object).Count -gt 0) { # if 1+ failovers update $Failovers array.
$GetFailoverXml | ForEach-Object {
$Failovers+=$_.AuthenticationName + ","
}
$Failovers=$Failovers.TrimEnd(",") # remove comma at end.
$MGFailovers+="MGName=" + $MGName + ",Primary=$Primary,Failovers=$Failovers;" # update $MGFailovers array.
}
Else { # if no failovers AND no override then generate warning.
$MGFailovers+="MGName=" + $MGName + ",Primary=$Primary,Failovers=;" # update $MGFailovers array.
$Script:Message+="[CODE_SECTION_$CodeSection] Management group $MGName has no failover servers configured.`n" # add custom message
$Script:CountError+=1 # update warning count.
}
}
}
Else {
$Script:Message+="[CODE_SECTION_$CodeSection] Management group $MGName has no OpsMgrConnector.Config.xml file.`n" # add custom message
$MGFailovers+="MGName=$MGName,MissingConfigFile;" # update $MGFailovers array.
$Script:CountError+=1 # update warning count.
}
}
$MGFailovers=$MGFailovers.TrimEnd(";")

} # END GET AGENT-SPECIFIC SETTINGS. *********************************************************************************
Else {
$AgentInstallDirectory="n/a"
$AgentURInstallDate="n/a"
$AgentVersion="n/a"
$MGFailovers="n/a"
$MGCount="n/a"
}

<# CODE_SECTION_10
Get HealthService account and StartMode type.
#>
$CodeSection="10"
$HealthServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\HealthService"
GetServiceInfo $HealthServiceRegKey
$Script:HealthServiceAccount=$Script:ServiceAccount
$Script:HealthServiceStartMode=$Script:ServiceStartMode

<# CODE_SECTION_11
Get certificate.
#>
$CodeSection="11"
$CertRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Machine Settings"
If ((Get-ItemProperty $CertRegKey).ChannelCertificateHash) {
$Hash=(Get-ItemProperty $CertRegKey).ChannelCertificateHash
$Thumbprint=Get-ChildItem -Path cert:\LocalMachine\My | Where-Object {$_.Thumbprint -eq $Hash}
$CertificateExpiryDate=$Thumbprint.NotAfter.ToString("yyyy-MM-dd")
$ValueToCheck="CertificateExpiryDate"; CheckNull $CertificateExpiryDate # Expect a value so check it.
}
Else {
$CertificateExpiryDate="n/a"
}

<# CODE_SECTION_12
Get AD Integration setting.
#>
$CodeSection="12"
If ($ObjAgentConfig.ActiveDirectoryIntegrationEnabled -eq $True) {
$ADIntegration="Enabled"}
Else {
$ADIntegration="Disabled"
}
$ValueToCheck="ADIntegration"; CheckNull $ADIntegration # Expect a value so check it.

<# CODE_SECTION_13
Get APM service StartMode type. This is may not be installed.
Description: Don't do null check, if key not found we assume it's not installed.
#>
$CodeSection="13"
$APMServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\System Center Management APM"
If (Test-Path $APMServiceRegKey) {
$APMInstalled="Yes"
GetServiceInfo $APMServiceRegKey
$Script:APMServiceAccount=$Script:ServiceAccount
$Script:APMServiceStartMode=$Script:ServiceStartMode
}
Else {
$APMInstalled="No"
$APMServiceAccount="n/a"
$APMServiceStartMode="n/a"
}

<# CODE_SECTION_14
Get ACS forwarder. This should be installed on ms, gw, agent.
#>
$CodeSection="14"
$ACSForwarderServiceRegKey="HKLM:SYSTEM\CurrentControlSet\Services\AdtAgent" # If this doesn't exist we'll catch the error and alert.
GetServiceInfo $ACSForwarderServiceRegKey
$Script:ACSForwarderServiceAccount=$Script:ServiceAccount
$Script:ACSForwarderServiceStartMode=$Script:ServiceStartMode

<# CODE_SECTION_15
Get TLS1.2 registry settings.
Description: This checks if the server has been explicitly configured to communicate with only TLS1.2 (i.e. all other protocols disabled). I used the below article as a reference to determine the required settings. It doesn't mean they are correct but it's the best reference we've got.
Reference article: https://docs.microsoft.com/en-us/system-center/scom/plan-security-tls12-config?view=sc-om-2019#:~:text=To%20enable%20the%20TLS%201.2,DisabledByDefault%20%5BValue%20%3D%200%5D
#>
$CodeSection="15"
$Count=0
$ArrayTLS12NETEnabled="HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319","HKLM:\SOFTWARE\WOW6432Node\Microsoft\.NETFramework\v4.0.30319"
$ArrayTLS12NETEnabled | ForEach-Object {
If (Test-Path -Path $_) {
$TLS12NETEnabled=(Get-ItemProperty $_).SchUseStrongCrypto
If ($TLS12NETEnabled -eq 1) {
$Count+=1
}
}
}
$TLS12OSRegKey="HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2"
$ArrayTLS12OS="Client","Server"
$ArrayTLS12OS | ForEach-Object {
If (Test-Path -Path "$TLS12OSRegKey\$_") {
$TLS12OSEnabled=(Get-ItemProperty "$TLS12OSRegKey\$_").Enabled
$TLS12OSDisabledByDefault=(Get-ItemProperty "$TLS12OSRegKey\$_").DisabledByDefault
If ($TLS12OSEnabled -eq 1 -and $TLS12OSDisabledByDefault -eq 0) {
$Count+=1
}
}
}
If ($Count -eq 0) {
$TLS12="NoConfig"
}
elseif ($Count -eq 4) {
$TLS12="CorrectConfig"
}
else {
$TLS12="IncompleteConfig"
}

<# CODE_SECTION_16
Get Log Analytics workspaces.
Description: Using the AgentConfigManager.MgmtSvcCfg object isn't reliable for collecting LA workspace info so we use the registry instead.
We only collect 2 variables: $LAWorkspaceId and $LAWorkspaceType. There's no need to check for nulls on either because $LAWorkspaceId
is a reg key and that can't be empty. If $LAWorkspaceType is present it MUST have a value. If it's missing it generates a terminating error.
#>
$CodeSection="16"
$LAWorkspaceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\Service Connector Services"
If (Test-Path $LAWorkspaceRegKey) {
$BindLAWorkspaceRegKey=Get-Item $LAWorkspaceRegKey # bind to the reg key so we can get properties.
$LAWorkspaceCount=($BindLAWorkspaceRegKey).SubKeyCount # here's your LAWorkspaceCount property.
If ($LAWorkspaceCount -gt 0) { # if 0 workspaces set $LAWorkspaces to "None" otherwise do below...
$ArrayLAWorkspaces=$BindLAWorkspaceRegKey.GetSubKeyNames() # this gets each subkey so we create an array in case there's more than 1.
$ArrayLAWorkspaces | ForEach-Object { # cycle through each item in the array.
$LAWorkspaceId=$_.Substring(16) # this removes "Log Analytics - " from the key name so we just have the workspace id.
$LAWorkspaceType=(Get-ItemProperty -Path $LAWorkspaceRegKey\$_)."Azure Cloud Type"
$ValueToCheck="LAWorkspaceType"; CheckNull $LAWorkspaceType
If ($Script:IsItNull -ne $True) { # 
Switch ($LAWorkspaceType) {
"0" {$LAWorkspaceType="Azure Commercial"; BREAK}
"1" {$LAWorkspaceType="Azure US Government"; BREAK}
"2" {$LAWorkspaceType="Azure China"; BREAK}
"3" {$LAWorkspaceType="Azure US Nat"; BREAK}
"4" {$LAWorkspaceType="Azure US Sec"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown log analytics workspace type: $LAWorkspaceType`n";
$Script:CountError+=1 # Increment warning counter so we can raise an alert to update the script.
}
}
}
$LAWorkspaces+="Type=$LAWorkspaceType,WorkSpaceId=$LAWorkspaceId;"
}
$LAWorkspaces=$LAWorkspaces.TrimEnd(";") # last bit to clean up.
}
Else {
$LAWorkspaceCount="0"
$LAWorkspaces="n/a"
}
}
Else {
$LAWorkspaceCount="0"
$LAWorkspaces="n/a"
}

<# CODE_SECTION_17
Get Log Analytics proxy server used to connect to Log Analytics.
Description: If this is empty it's not an error but we need to add custom discovery data so need to check for a null value.
There is a reference in the CheckNull function for this. It's not pretty but it let's us reuse code.
#>
$CodeSection="17"
$Script:LAProxyUrl=$ObjAgentConfig.proxyUrl
$ValueToCheck="LAProxyUrl"; CheckNull $Script:LAProxyUrl # Add custom discovery data

<# CODE_SECTION_18
Get Log Analytics account used to authenticate to the proxy server.
If this is empty it's not an error but we need to add custom discovery data so need to check for a null value.
There is a reference in the CheckNull function for this. It's not pretty but it let's us reuse code.
#>
$CodeSection="18"
$Script:LAProxyUsername=$ObjAgentConfig.proxyUsername
$ValueToCheck="LAProxyUsername"; CheckNull $Script:LAProxyUsername # Expect a value so check it.

<# CODE_SECTION_19
Get computer type.
#>
$CodeSection="19"
$ComputerType=(Get-CimInstance -ClassName Win32_ComputerSystem).Model
$ValueToCheck="ComputerType"; CheckNull $ComputerType # Expect a value so check it.


If((Get-ItemProperty $SetupRegKey).ServerVersion) {# START MGMT SERVER-SPECIFIC SECTION. *********************************************************************************

<# CODE_SECTION_20
Get mgmt server install directory.
#>
$CodeSection="20"
$MgmtServerInstallDirectory=(Get-ItemProperty $SetupRegKey).InstallDirectory.TrimEnd("\")
$ValueToCheck="MgmtServerInstallDirectory"; CheckNull $MgmtServerInstallDirectory # Expect a value so check it.

<# CODE_SECTION_21
Get mgmt server UR install date.
#>
$CodeSection="21"
$MgmtServerURFile=Get-Item $MgmtServerInstallDirectory\Tools\TMF\OMTraceTMFVer.Dll # changed to this file July 10, 2020.
$MgmtServerURInstallDate=$MgmtServerURFile.LastAccessTime.ToString("yyyy-MM-dd")
$ValueToCheck="MgmtServerURInstallDate"; CheckNull $MgmtServerURInstallDate # Expect a value so check it.

<# CODE_SECTION_22
Get mgmt server UR version.
There are 3 possible outcomes to check for in this order:
1 - Emtpy value
2 - A match is found in the switch block (expected)
3 - Unknown version
#>
$CodeSection="22"
$MgmtServerVersion=$MgmtServerURFile.VersionInfo.FileVersion
$ValueToCheck="MgmtServerVersion"; CheckNull $MgmtServerVersion # Check 1. If it's empty generate error and continue.
If ($Script:IsItNull -ne $True) { # Check 2. Is there an existing match?
Switch($MgmtServerVersion) {
# SCOM 2012 R2
"7.1.10226.0" {$MgmtServerVersion="7.1.10226.0 (2012 R2 RTM)"; BREAK}
"7.1.10226.1009" {$MgmtServerVersion="7.1.10226.1009 (2012 R2 UR1)"; BREAK}
"7.1.10226.1015" {$MgmtServerVersion="7.1.10226.1015 (2012 R2 UR2)"; BREAK}
"7.1.10226.1037" {$MgmtServerVersion="7.1.10226.1037 (2012 R2 UR3)"; BREAK}
"7.1.10226.1046" {$MgmtServerVersion="7.1.10226.1046 (2012 R2 UR4)"; BREAK}
"7.1.10226.1052" {$MgmtServerVersion="7.1.10226.1052 (2012 R2 UR5)"; BREAK}
"7.1.10226.1064" {$MgmtServerVersion="7.1.10226.1064 (2012 R2 UR6)"; BREAK}
"7.1.10226.1090" {$MgmtServerVersion="7.1.10226.1090 (2012 R2 UR7)"; BREAK}
"7.1.10226.1118" {$MgmtServerVersion="7.1.10226.1118 (2012 R2 UR8)"; BREAK}
"7.1.10226.1177" {$MgmtServerVersion="7.1.10226.1177 (2012 R2 UR9)"; BREAK}
"7.1.10226.1239" {$MgmtServerVersion="7.1.10226.1239 (2012 R2 UR11)"; BREAK}
"7.1.10226.1304" {$MgmtServerVersion="7.1.10226.1304 (2012 R2 UR12)"; BREAK}
"7.1.10226.1360" {$MgmtServerVersion="7.1.10226.1360 (2012 R2 UR13)"; BREAK}
"7.1.10226.1387" {$MgmtServerVersion="7.1.10226.1387 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$MgmtServerVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10931.0" {$MgmtServerVersion="8.0.10931.0 (2016 UR1)"; BREAK}
"8.0.10949.0" {$MgmtServerVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$MgmtServerVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$MgmtServerVersion="8.0.10977.0 (2016 UR4)"; BREAK}
"8.0.10990.0" {$MgmtServerVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$MgmtServerVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$MgmtServerVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$MgmtServerVersion="8.0.11037.0 (2016 UR8)"; BREAK}
"8.0.11049.0" {$MgmtServerVersion="8.0.11049.0 (2016 UR9)"; BREAK}
# SEMI ANNUAL Channel
"8.0.13053.0" {$MgmtServerVersion="8.0.13053.0 (1801)"; BREAK}
"8.0.13067.0" {$MgmtServerVersion="8.0.13067.0 (1807)"; BREAK}
# SCOM 2019
"10.19.10003.0" {$MgmtServerVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$MgmtServerVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$MgmtServerVersion="10.19.10140.0 (2019 UR1)"; BREAK}
"10.19.10349.0" {$MgmtServerVersion="10.19.10349.0 (2019 UR1 with Hotfix)"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown management server version: $MgmtServerVersion.`n";
$Script:CountError+=1
$MgmtServerVersion="$MgmtServerVersion (Unknown)"
}
}
}

<# CODE_SECTION_23
Get CSHostService log on account.
#>
$CodeSection="23"
$ConfigServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\cshost"
GetServiceInfo $ConfigServiceRegKey
$Script:ConfigServiceAccount=$Script:ServiceAccount
$Script:ConfigServiceStartMode=$Script:ServiceStartMode

<# CODE_SECTION_24
Get OMSDKService log on account.
#>
$CodeSection="24"
$DataAccessServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\OMSDK"
GetServiceInfo $DataAccessServiceRegKey
$Script:DataAccessServiceAccount=$Script:ServiceAccount
$Script:DataAccessServiceStartMode=$Script:ServiceStartMode

<# CODE_SECTION_25
Get ops db name
#>
$CodeSection="25"
$OpsDbName=(Get-ItemProperty $SetupRegKey).DatabaseName
$ValueToCheck="OpsDbName"; CheckNull $OpsDbName # Expect a value so check it.

<# CODE_SECTION_26
Get ops db server name
#>
$CodeSection="26"
$OpsDbServer=(Get-ItemProperty $SetupRegKey).DatabaseServerName
$ValueToCheck="OpsDbServer"; CheckNull $OpsDbServer # Expect a value so check it.

<# CODE_SECTION_27
Get data warehouse db name
#>
$CodeSection="27"
$DWDbName=(Get-ItemProperty $SetupRegKey).DataWarehouseDBName
$ValueToCheck="DWDbName"; CheckNull $DWDbName # Expect a value so check it.

<# CODE_SECTION_28
Get data warehouse db server name
#>
$CodeSection="28"
$DwDbServer=(Get-ItemProperty $SetupRegKey).DataWarehouseDBServerName
$ValueToCheck="DwDbServer"; CheckNull $DwDbServer # Expect a value so check it.

<# CODE_SECTION_29
Get ACS collector info.
#>
$CodeSection="29"
$ACSCollectorServiceRegKey="HKLM:SYSTEM\CurrentControlSet\Services\AdtServer"
If (Test-Path $ACSCollectorServiceRegKey) { # If this key exists it's an ACS collector.
$ACSCollector="Yes"
GetServiceInfo $ACSCollectorServiceRegKey
# Get service info.
$Script:ACSCollectorServiceAccount=$Script:ServiceAccount
$Script:ACSCollectorServiceStartMode=$Script:ServiceStartMode
<#
Get ACS collector server UR version.
There are 3 possible outcomes to check for in this order:
1 - Emtpy value
2 - A match is found in the switch block (expected)
3 - Unknown version
#>
$ACSCollectorURFile=Get-Item $WinDir\System32\Security\AdtServer\OmacAdmn.dll
$ACSCollectorURInstallDate=$ACSCollectorURFile.LastAccessTime.ToString("yyyy-MM-dd") # use this to determine when update rollup was installed.
$ValueToCheck="ACSCollectorURInstallDate"; CheckNull $ACSCollectorURInstallDate # Expect a value so check it.
$ACSCollectorVersion=$ACSCollectorURFile.VersionInfo.FileVersion
$ValueToCheck="ACSCollectorVersion"; CheckNull $ACSCollectorVersion # Check 1. If it's empty generate error and continue.
If ($Script:IsItNull -ne $True) { # Check 2. Is there an existing match?
Switch($ACSCollectorVersion) {
# SCOM 2012 R2
"7.1.10226.0" {$ACSCollectorVersion="7.1.10226.0 (2012 R2 RTM)"; BREAK}
"7.1.10226.1239" {$ACSCollectorVersion="7.1.10226.1239 (2012 R2 UR11)"; BREAK}
"7.1.10226.1304" {$ACSCollectorVersion="7.1.10226.1304 (2012 R2 UR12)"; BREAK}
"7.1.10226.1360" {$ACSCollectorVersion="7.1.10226.1360 (2012 R2 UR13)"; BREAK}
"7.1.10226.1387" {$ACSCollectorVersion="7.1.10226.1387 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$ACSCollectorVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10949.0" {$ACSCollectorVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$ACSCollectorVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$ACSCollectorVersion="8.0.10977.0 (2016 UR4)"; BREAK}		
"8.0.10990.0" {$ACSCollectorVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$ACSCollectorVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$ACSCollectorVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$ACSCollectorVersion="8.0.11037.0 (2016 UR8)"; BREAK}		
"8.0.11049.0" {$ACSCollectorVersion="8.0.11049.0 (2016 UR9)"; BREAK}		
# SEMI ANNUAL Channel
"8.0.13053.0" {$ACSCollectorVersion="8.0.13053.0 (1801)"; BREAK}		
"8.0.13067.0" {$ACSCollectorVersion="8.0.13067.0 (1807)"; BREAK}	
# SCOM 2019
"10.19.10003.0" {$ACSCollectorVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$ACSCollectorVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$ACSCollectorVersion="10.19.10140.0 (2019 UR1)"; BREAK}
"10.19.10349.0" {$ACSCollectorVersion="10.19.10349.0 (2019 UR1 with Hotfix)"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown ACS collector version: $ACSCollectorVersion.`n";
$Script:CountError+=1
$ACSCollectorVersion="$ACSCollectorVersion (Unknown)"
}
}
}
}
Else {
$ACSCollector="No"
$ACSCollectorServiceAccount="n/a"
$ACSCollectorServiceStartMode="n/a"
$ACSCollectorURInstallDate="n/a"
$ACSCollectorVersion="n/a"
}

<# CODE_SECTION_30
Get RMS owner.
#>
$CodeSection="30"
$Connection=New-Object System.Data.SQLClient.SQLConnection
$Query="SELECT [PrincipalName] FROM [$OpsDbName].[dbo].[MTV_HealthService] WHERE IsRHS='1'"
$Connection.ConnectionString="Data Source=$OpsDbServer;Database=$OpsDbName;Trusted_Connection=True;"
$Connection.Open()
$Command=New-Object System.Data.SQLClient.SQLCommand
$Command.Connection=$Connection
$Command.CommandText=$Query
$Reader=$Command.ExecuteReader()
$Datatable=New-Object System.Data.DataTable
$Datatable.Load($Reader)
$RMSFqdn=$Datatable.PrincipalName
$Connection.Close() 
If($RMSFqdn -eq $ComputerFqdn) {
$RMS="Yes"
} Else {
$RMS="No"
}

} # END MGMT SERVER-SPECIFIC SECTION. *********************************************************************************
else {
$MgmtServerInstallDirectory="n/a"
$MgmtServerURInstallDate="n/a"
$MgmtServerVersion="n/a"
$ConfigServiceAccount="n/a"
$ConfigServiceStartMode="n/a"
$DataAccessServiceAccount="n/a"
$DataAccessServiceStartMode="n/a"
$OpsDbName="n/a"
$OpsDbServer="n/a"
$DWDbName="n/a"
$DwDbServer="n/a"
$ACSCollector="No"
$ACSCollectorServiceAccount="n/a"
$ACSCollectorServiceStartMode="n/a"
$ACSCollectorURInstallDate="n/a"
$ACSCollectorVersion="n/a"
$RMS="n/a"

}

If((Get-ItemProperty $SetupRegKey).MOMGatewayVersion) { # START GATEWAY SERVER-SPECIFIC SECTION. *********************************************************************************

<# CODE_SECTION_31
Get gateway server install directory.
#>
$CodeSection="31"
$GatewayServerInstallDirectory=(Get-ItemProperty $SetupRegKey).InstallDirectory.TrimEnd("\")
$ValueToCheck="GatewayServerInstallDirectory"; CheckNull $GatewayServerInstallDirectory # Expect a value so check it.

<# CODE_SECTION_32
Get gateway server UR install date.
#>
$CodeSection="32"
$GatewayServerURFile=Get-Item $GatewayServerInstallDirectory\HealthService.dll # changed to this file July 10, 2020.
$GatewayServerURInstallDate=$GatewayServerURFile.LastAccessTime.ToString("yyyy-MM-dd")
$ValueToCheck="GatewayServerURInstallDate"; CheckNull $GatewayServerURInstallDate # Expect a value so check it.

<# CODE_SECTION_33
Get gateway server UR version.
There are 4 possible outcomes to check for in this order:
1 - Emtpy value
2 - A match is found in the switch block (expected)
3 - Overridden
4 - Unknown version
#>
$CodeSection="33"
$GatewayServerVersion=$GatewayServerURFile.VersionInfo.FileVersion
$ValueToCheck="GatewayServerVersion"; CheckNull $GatewayServerVersion # Check 1. If it's empty generate error and continue.
If ($Script:IsItNull -ne $True) { # Check 2. Is there an existing match?
Switch($GatewayServerVersion) {
# SCOM 2012 R2
"7.1.10184.0" {$GatewayServerVersion="7.1.10184.0 (2012 R2 RTM)"; BREAK}
"7.1.10188.0" {$GatewayServerVersion="7.1.10188.0 (2012 R2 UR1)"; BREAK}
"7.1.10195.0" {$GatewayServerVersion="7.1.10195.0 (2012 R2 UR2)"; BREAK}
"7.1.10204.0" {$GatewayServerVersion="7.1.10204.0 (2012 R2 UR3)"; BREAK}
"7.1.10211.0" {$GatewayServerVersion="7.1.10211.0 (2012 R2 UR4)"; BREAK}
"7.1.10213.0" {$GatewayServerVersion="7.1.10213.0 (2012 R2 UR5)"; BREAK}
"7.1.10218.0" {$GatewayServerVersion="7.1.10218.0 (2012 R2 UR6)"; BREAK}
"7.1.10229.0" {$GatewayServerVersion="7.1.10229.0 (2012 R2 UR7)"; BREAK}
"7.1.10241.0" {$GatewayServerVersion="7.1.10241.0 (2012 R2 UR8)"; BREAK}
"7.1.10268.0" {$GatewayServerVersion="7.1.10268.0 (2012 R2 UR9)"; BREAK}
"7.1.10285.0" {$GatewayServerVersion="7.1.10285.0 (2012 R2 UR11)"; BREAK}
"7.1.10292.0" {$GatewayServerVersion="7.1.10292.0 (2012 R2 UR12)"; BREAK}
"7.1.10302.0" {$GatewayServerVersion="7.1.10302.0 (2012 R2 UR13)"; BREAK}
"7.1.10305.0" {$GatewayServerVersion="7.1.10305.0 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$GatewayServerVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10949.0" {$GatewayServerVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$GatewayServerVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$GatewayServerVersion="8.0.10977.0 (2016 UR4)"; BREAK}		
"8.0.10990.0" {$GatewayServerVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$GatewayServerVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$GatewayServerVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$GatewayServerVersion="8.0.11037.0 (2016 UR8)"; BREAK}		
"8.0.11049.0" {$GatewayServerVersion="8.0.11049.0 (2016 UR9)"; BREAK}		
# SEMI ANNUAL Channel
"8.0.13053.0" {$GatewayServerVersion="8.0.13053.0 (1801)"; BREAK}		
"8.0.13067.0" {$GatewayServerVersion="8.0.13067.0 (1807)"; BREAK}	
# SCOM 2019
"10.19.10003.0" {$GatewayServerVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$GatewayServerVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$GatewayServerVersion="10.19.10140.0 (2019 UR1)"; BREAK}
"10.19.10349.0" {$GatewayServerVersion="10.19.10349.0 (2019 UR1 with Hotfix)"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown gateway server version: $GatewayServerVersion.`n";
$Script:CountError+=1
$GatewayServerVersion="$GatewayServerVersion (Unknown)"
}
}
}

} # END GATEWAY SERVER-SPECIFIC SECTION. *********************************************************************************
else {
$GatewayServerInstallDirectory="n/a"
$GatewayServerURInstallDate="n/a"
$GatewayServerVersion="n/a"
}

# START WEB CONSOLE SERVER-SPECIFIC SECTION. *********************************************************************************    
$WebConsoleRegKey="HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\WebConsole"
If(Test-Path $WebConsoleRegKey) {
<# CODE_SECTION_34
Get web console install directory.
#>
$CodeSection="34"
$WebConsoleInstallDirectory=(Get-ItemProperty $WebConsoleRegKey).InstallDirectory.TrimEnd("\")
$ValueToCheck="WebConsoleInstallDirectory"; CheckNull $WebConsoleInstallDirectory # Expect a value so check it.

<# CODE_SECTION_35
Get web console UR install date.
#>
$CodeSection="35"
$WebConsoleURFile=Get-Item $WebConsoleInstallDirectory\WebHost\bin\Microsoft.EnterpriseManagement.Management.DataProviders.dll # using this file to id UR level.
$WebConsoleURInstallDate=$WebConsoleURFile.LastAccessTime.ToString("yyyy-MM-dd")
$ValueToCheck="WebConsoleURInstallDate"; CheckNull $WebConsoleURInstallDate # Expect a value so check it.

<# CODE_SECTION_36
Get web console version.
There are 3 possible outcomes to check for in this order:
1 - Emtpy value
2 - A match is found in the switch block (expected)
3 - Unknown version
#>
$CodeSection="36"
$WebConsoleVersion=$WebConsoleURFile.VersionInfo.FileVersion
$ValueToCheck="WebConsoleVersion"; CheckNull $WebConsoleVersion # Check 1. If it's empty generate error and continue.
If ($Script:IsItNull -ne $True) { # Check 2. Is there an existing match?
Switch($WebConsoleVersion) {
# SCOM 2012 R2
"7.1.10226.0" {$WebConsoleVersion="7.1.10226.0 (2012 R2 RTM)"; BREAK}
"7.1.10226.1009" {$WebConsoleVersion="7.1.10226.1009 (2012 R2 UR1)"; BREAK}
"7.1.10226.1015" {$WebConsoleVersion="7.1.10226.1015 (2012 R2 UR2)"; BREAK}
"7.1.10226.1037" {$WebConsoleVersion="7.1.10226.1037 (2012 R2 UR3)"; BREAK}
"7.1.10226.1046" {$WebConsoleVersion="7.1.10226.1046 (2012 R2 UR4)"; BREAK}
"7.1.10226.1052" {$WebConsoleVersion="7.1.10226.1052 (2012 R2 UR5)"; BREAK}
"7.1.10226.1064" {$WebConsoleVersion="7.1.10226.1064 (2012 R2 UR6)"; BREAK}
"7.1.10226.1090" {$WebConsoleVersion="7.1.10226.1090 (2012 R2 UR7)"; BREAK}
"7.1.10226.1118" {$WebConsoleVersion="7.1.10226.1118 (2012 R2 UR8)"; BREAK}
"7.1.10226.1177" {$WebConsoleVersion="7.1.10226.1177 (2012 R2 UR9)"; BREAK}
"7.1.10226.1239" {$WebConsoleVersion="7.1.10226.1239 (2012 R2 UR11)"; BREAK}
"7.1.10226.1304" {$WebConsoleVersion="7.1.10226.1304 (2012 R2 UR12)"; BREAK}
"7.1.10226.1360" {$WebConsoleVersion="7.1.10226.1360 (2012 R2 UR13)"; BREAK}
"7.1.10226.1387" {$WebConsoleVersion="7.1.10226.1387 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$WebConsoleVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10949.0" {$WebConsoleVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$WebConsoleVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$WebConsoleVersion="8.0.10977.0 (2016 UR4)"; BREAK}		
"8.0.10990.0" {$WebConsoleVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$WebConsoleVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$WebConsoleVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$WebConsoleVersion="8.0.11037.0 (2016 UR8)"; BREAK}		
"8.0.11049.0" {$WebConsoleVersion="8.0.11049.0 (2016 UR9)"; BREAK}		
# SEMI ANNUAL Channel
"8.0.13053.0" {$WebConsoleVersion="8.0.13053.0 (1801)"; BREAK}		
"8.0.13067.0" {$WebConsoleVersion="8.0.13067.0 (1807)"; BREAK}	
# SCOM 2019
"10.19.10003.0" {$WebConsoleVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$WebConsoleVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$WebConsoleVersion="10.19.10140.0 (2019 UR1)"; BREAK}
"10.19.10349.0" {$WebConsoleVersion="10.19.10349.0 (2019 UR1 with Hotfix)"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown web console version: $WebConsoleVersion.`n"; # Check #4. If previous 3 checks fail it must be a new version of the WebConsole. Generate warning so we know to update mp.
$Script:CountError+=1
$WebConsoleVersion="$WebConsoleVersion (Unknown)"
}
}
}

<# CODE_SECTION_37
Get Authentication Mode.
#>
$CodeSection="37"
$AuthenticationMode=(Get-ItemProperty $WebConsoleRegKey).AUTHENTICATION_MODE
$ValueToCheck="AuthenticationMode"; CheckNull $AuthenticationMode # Expect a value so check it.

<# CODE_SECTION_38
Get DefaultServer.
#>
$CodeSection="38"
$DefaultServer=(Get-ItemProperty $WebConsoleRegKey).DEFAULT_SERVER
$ValueToCheck="DefaultServer"; CheckNull $DefaultServer # Expect a value so check it.

<# CODE_SECTION_39
Get WebConsoleUrl.
#>
$CodeSection="39"
$WebConsoleUrl=(Get-ItemProperty $WebConsoleRegKey).WEB_CONSOLE_URL
$ValueToCheck="WebConsoleUrl"; CheckNull $WebConsoleUrl # Expect a value so check it.

<# CODE_SECTION_40
Get ApmAdvisorUrl.
#>
$CodeSection="40"
$ApmAdvisorUrl=(Get-ItemProperty $WebConsoleRegKey).APM_ADVISOR_URL
$ValueToCheck="ApmAdvisorUrl"; CheckNull $ApmAdvisorUrl # Expect a value so check it.

<# CODE_SECTION_41
Get ApmDiagnosticsUrl.
#>
$CodeSection="41"
$ApmDiagnosticsUrl=(Get-ItemProperty $WebConsoleRegKey).APM_DIAGNOSTICS_URL
$ValueToCheck="ApmDiagnosticsUrl"; CheckNull $ApmDiagnosticsUrl # Expect a value so check it.

} # END WEB CONSOLE-SPECIFIC SECTION. *********************************************************************************
else {
$WebConsoleInstallDirectory="n/a"
$WebConsoleURInstallDate="n/a"
$WebConsoleVersion="n/a"
$AuthenticationMode="n/a"
$DefaultServer="n/a"
$WebConsoleUrl="n/a"
$ApmAdvisorUrl="n/a"
$ApmDiagnosticsUrl="n/a"
}

# START REPORT SERVER-SPECIFIC SECTION. *********************************************************************************    
<# CODE_SECTION_42
Get report server install directory.
#>
$ReportServerRegKey="HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Reporting" # if this key exists it's a SCOM report server.
If(Test-Path $ReportServerRegKey) {
$CodeSection="42"
$ReportServerInstallDirectory=(Get-ItemProperty $ReportServerRegKey\..\Setup\Reporting).InstallDirectory.TrimEnd("\")
$ValueToCheck="ReportServerInstallDirectory"; CheckNull $ReportServerInstallDirectory # Expect a value so check it.

<# CODE_SECTION_43
Get report server UR install date.
Gotta do some funk here for 2012 R2. If a reporting UR hasn't been installed (only applies to UR12,13,14) we need to use a different file as the "SDK Binaries" folder won't exist.
#>
$CodeSection="43"
If(Test-Path "$ReportServerInstallDirectory\SDK Binaries\Microsoft.EnterpriseManagement.OperationsManager.dll") { # If this file exists in 2012 R2, a UR has been installed...
$ReportServerURFile=Get-Item "$ReportServerInstallDirectory\SDK Binaries\Microsoft.EnterpriseManagement.OperationsManager.dll" # ...and this file will exist...
}
else {
$ReportServerURFile=Get-Item "$ReportServerInstallDirectory\Microsoft.Mom.Common.dll" # ...otherwise use this file that gets installed by default when reporting is installed.
}
$ReportServerURInstallDate=$ReportServerURFile.LastAccessTime.ToString("yyyy-MM-dd")
$ValueToCheck="ReportServerURInstallDate"; CheckNull $ReportServerURInstallDate # Expect a value so check it.

<# CODE_SECTION_44
Get report server version.
#>
$CodeSection="44"
$ReportServerVersion=$ReportServerURFile.VersionInfo.FileVersion
$ValueToCheck="ReportServerVersion"; CheckNull $ReportServerVersion # Check #1 Is it empty?
If ($Script:IsItNull -ne $True) { # Check #2 Is there an existing match?
Switch($ReportServerVersion) {
# SCOM 2012 R2
"7.1.10226.0" {$ReportServerVersion="7.1.10226.0 (2012 R2 RTM)"; BREAK}
"7.1.10226.1304" {$ReportServerVersion="7.1.10226.1304 (2012 R2 UR12)"; BREAK}
"7.1.10226.1360" {$ReportServerVersion="7.1.10226.1360 (2012 R2 UR13)"; BREAK}
"7.1.10226.1387" {$ReportServerVersion="7.1.10226.1387 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$ReportServerVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10949.0" {$ReportServerVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$ReportServerVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$ReportServerVersion="8.0.10977.0 (2016 UR4)"; BREAK}		
"8.0.10990.0" {$ReportServerVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$ReportServerVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$ReportServerVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$ReportServerVersion="8.0.11037.0 (2016 UR8)"; BREAK}		
"8.0.11049.0" {$ReportServerVersion="8.0.11049.0 (2016 UR9)"; BREAK}		
# SEMI ANNUAL Channel
"8.0.13053.0" {$ReportServerVersion="8.0.13053.0 (1801)"; BREAK}		
"8.0.13067.0" {$ReportServerVersion="8.0.13067.0 (1807)"; BREAK}	
# SCOM 2019
"10.19.10003.0" {$ReportServerVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$ReportServerVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$ReportServerVersion="10.19.10140.0 (2019 UR1)"; BREAK}
"10.19.10349.0" {$ReportServerVersion="10.19.10349.0 (2019 UR1 with Hotfix)"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown report server version: $ReportServerVersion.`n"; # Check #4. If previous 3 checks fail it must be a new version of the ReportServer. Generate warning so we know to update mp.
$Script:CountError+=1
$ReportServerVersion="$ReportServerVersion (Unknown)"
}
}
}

<# CODE_SECTION_45
Get ReportServerDwDbServer.
#>
$CodeSection="45"
$ReportServerDwDbServer=(Get-ItemProperty $ReportServerRegKey).DWDBInstance
$ValueToCheck="ReportServerDwDbServer"; CheckNull $ReportServerDwDbServer # Expect a value so check it.

<# CODE_SECTION_46
Get ReportServerDWDBName.
#>
$CodeSection="46"
$ReportServerDWDBName=(Get-ItemProperty $ReportServerRegKey).DWDBName
$ValueToCheck="ReportServerDWDBName"; CheckNull $ReportServerDWDBName # Expect a value so check it.

<# CODE_SECTION_47
Get ReportServerUrl.
#>
$CodeSection="47"
$ReportServerUrl=(Get-ItemProperty $ReportServerRegKey).ReportingServerUrl
$ValueToCheck="ReportServerUrl"; CheckNull $ReportServerUrl # Expect a value so check it.

<# CODE_SECTION_48
Get SRSInstance.
#>
$CodeSection="48"
$SRSInstance=(Get-ItemProperty $ReportServerRegKey).SRSInstance
$ValueToCheck="SRSInstance"; CheckNull $SRSInstance # Expect a value so check it.
If (($Script:IsItNull -ne $True) -and ($SRSInstance -match "\\") ) { # If it's a named instance we need to do some funk to $SRSInstance to find the service in the reg in step 49. The extra \ is an escape character.
$SearchSlash=$SRSInstance.IndexOf("\") # Does $SRSInstance have a slash in it meaning it's a named instance?
$SRSInstance='ReportServer$'+$SRSInstance.Substring($SearchSlash+1) # If it does, set proper format of $SRSInstance so we can find it in step 49.
}
elseif ($Script:IsItNull -ne $True) { # If not named instance set $SRSInstance to "ReportServer" because that's the default key name.
$SRSInstance="ReportServer"
}

<# CODE_SECTION_49
Get report service account and StartMode type..
#>
$CodeSection="49"
$ReportServerServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\$SRSInstance" # grab $SRSInstance from previous step, this caters to named instances too.
GetServiceInfo $ReportServerServiceRegKey
$Script:ReportServerServiceAccount=$Script:ServiceAccount
$Script:ReportServerServiceStartMode=$Script:ServiceStartMode

} # END REPORT SERVER-SPECIFIC SECTION. *********************************************************************************    
else {
$ReportServerInstallDirectory="n/a"
$ReportServerURInstallDate="n/a"
$ReportServerVersion="n/a"
$ReportServerDwDbServer="n/a"
$ReportServerDWDBName="n/a"
$ReportServerUrl="n/a"
$SRSInstance="n/a"
$ReportServerServiceAccount="n/a"
$ReportServerServiceStartMode="n/a"
}

# START CONSOLE-SPECIFIC SECTION. *********************************************************************************    
<# CODE_SECTION_50
Get console directory.
#>
$ConsoleRegKey="HKLM:\SOFTWARE\Microsoft\System Center Operations Manager\12\Setup\Console" # if this key exists it has the UI installed.
If(Test-Path $ConsoleRegKey) {
$CodeSection="50"
$ConsoleInstallDirectory=(Get-ItemProperty $ConsoleRegKey).InstallDirectory.TrimEnd("\")
$ValueToCheck="ConsoleInstallDirectory"; CheckNull $ConsoleInstallDirectory # Expect a value so check it.

<# CODE_SECTION_51
Get console UR install date.
#>
$CodeSection="51"
$ConsoleURFile=Get-Item $ConsoleInstallDirectory\Tools\TMF\OMTraceTMFVer.Dll # changed to this file July 10, 2020.
$ConsoleURInstallDate=$ConsoleURFile.LastAccessTime.ToString("yyyy-MM-dd")
$ValueToCheck="ConsoleURInstallDate"; CheckNull $ConsoleURInstallDate # Expect a value so check it.

<# CODE_SECTION_52
Get console version.
There are 3 possible outcomes to check for in this order:
1 - Emtpy value
2 - A match is found in the switch block (expected)
3 - Unknown version
#>
$CodeSection="52"
$ConsoleVersion=$ConsoleURFile.VersionInfo.FileVersion
$ValueToCheck="ConsoleVersion"; CheckNull $ConsoleVersion # Check #1 Is it empty?
If ($Script:IsItNull -ne $True) { # Check #2 Is there an existing match?
Switch($ConsoleVersion) {
# SCOM 2012 R2
"7.1.10226.0" {$ConsoleVersion="7.1.10226.0 (2012 R2 RTM)"; BREAK}
"7.1.10226.1009" {$ConsoleVersion="7.1.10226.1009 (2012 R2 UR1)"; BREAK}
"7.1.10226.1015" {$ConsoleVersion="7.1.10226.1015 (2012 R2 UR2)"; BREAK}
"7.1.10226.1037" {$ConsoleVersion="7.1.10226.1037 (2012 R2 UR3)"; BREAK}
"7.1.10226.1046" {$ConsoleVersion="7.1.10226.1046 (2012 R2 UR4)"; BREAK}
"7.1.10226.1064" {$ConsoleVersion="7.1.10226.1064 (2012 R2 UR6)"; BREAK}
"7.1.10226.1090" {$ConsoleVersion="7.1.10226.1090 (2012 R2 UR7)"; BREAK}
"7.1.10226.1118" {$ConsoleVersion="7.1.10226.1118 (2012 R2 UR8)"; BREAK}
"7.1.10226.1177" {$ConsoleVersion="7.1.10226.1177 (2012 R2 UR9)"; BREAK}
"7.1.10226.1239" {$ConsoleVersion="7.1.10226.1239 (2012 R2 UR11)"; BREAK}
"7.1.10226.1304" {$ConsoleVersion="7.1.10226.1304 (2012 R2 UR12)"; BREAK}
"7.1.10226.1360" {$ConsoleVersion="7.1.10226.1360 (2012 R2 UR13)"; BREAK}
"7.1.10226.1387" {$ConsoleVersion="7.1.10226.1387 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$ConsoleVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10949.0" {$ConsoleVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$ConsoleVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$ConsoleVersion="8.0.10977.0 (2016 UR4)"; BREAK}		
"8.0.10990.0" {$ConsoleVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$ConsoleVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$ConsoleVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$ConsoleVersion="8.0.11037.0 (2016 UR8)"; BREAK}		
"8.0.11049.0" {$ConsoleVersion="8.0.11049.0 (2016 UR9)"; BREAK}		
# SEMI ANNUAL Channel
"8.0.13053.0" {$ConsoleVersion="8.0.13053.0 (1801)"; BREAK}		
"8.0.13067.0" {$ConsoleVersion="8.0.13067.0 (1807)"; BREAK}	
# SCOM 2019
"10.19.10003.0" {$ConsoleVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$ConsoleVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$ConsoleVersion="10.19.10140.0 (2019 UR1)"; BREAK}
"10.19.10349.0" {$ConsoleVersion="10.19.10349.0 (2019 UR1 with Hotfix)"; BREAK}
Default {
$Script:Message+="[CODE_SECTION_$CodeSection] Unknown console version: $ConsoleVersion.`n"; # Check #4. If previous 3 checks fail it must be a new version of the Console. Generate warning so we know to update mp.
$Script:CountError+=1
$ConsoleVersion="$ConsoleVersion (Unknown)"
}
}
}
} # END CONSOLE-SPECIFIC SECTION. *********************************************************************************    
else {
$ConsoleInstallDirectory="n/a"
$ConsoleURInstallDate="n/a"
$ConsoleVersion="n/a"
}



<# FOR TESTING
write-host "OperatingSystem: $OperatingSystem"
write-host "Product: $Product"
write-host "AgentInstallDirectory: $AgentInstallDirectory"
write-host "AgentURInstallDate: $AgentURInstallDate"
write-host "AgentVersion: $AgentVersion"
write-host "MGCount: $MGCount"
write-host "MGFailovers: $MGFailovers"
write-host "HealthServiceAccount: $HealthServiceAccount"
write-host "HealthServiceStartMode: $HealthServiceStartMode"
write-host "CertificateExpiryDate: $CertificateExpiryDate"
write-host "ADIntegration: $ADIntegration"
write-host "APMInstalled: $APMInstalled"
write-host "APMServiceAccount: $APMServiceAccount"
write-host "APMServiceStartMode: $APMServiceStartMode"
write-host "ACSForwarderServiceAccount: $ACSForwarderServiceAccount"
write-host "ACSForwarderServiceStartMode: $ACSForwarderServiceStartMode"
write-host "TLS12: $TLS12"
write-host "LAWorkspaceCount: $LAWorkspaceCount"
write-host "LAWorkspaces: $LAWorkspaces"
write-host "LAProxyUrl: $LAProxyUrl"
write-host "LAProxyUsername: $LAProxyUsername"
write-host "ComputerType: $ComputerType"
write-host "MgmtServerInstallDirectory: $MgmtServerInstallDirectory"
write-host "MgmtServerURInstallDate: $MgmtServerURInstallDate"
write-host "MgmtServerVersion: $MgmtServerVersion"
write-host "ConfigServiceAccount: $ConfigServiceAccount"
write-host "ConfigServiceStartMode: $ConfigServiceStartMode"
write-host "DataAccessServiceAccount: $DataAccessServiceAccount"
write-host "DataAccessServiceStartMode: $DataAccessServiceStartMode"
write-host "OpsDbName: $OpsDbName"
write-host "OpsDbServer: $OpsDbServer"
write-host "DWDbName: $DWDbName"
write-host "DwDbServer: $DwDbServer"
write-host "ACSCollector: $ACSCollector"
write-host "ACSCollectorServiceAccount: $ACSCollectorServiceAccount"
write-host "ACSCollectorServiceStartMode: $ACSCollectorServiceStartMode"
write-host "ACSCollectorURInstallDate: $ACSCollectorURInstallDate"
write-host "ACSCollectorVersion: $ACSCollectorVersion"
write-host "RMS: $RMS"
write-host "GatewayServerInstallDirectory: $GatewayServerInstallDirectory"
write-host "GatewayServerURInstallDate: $GatewayServerURInstallDate"
write-host "GatewayServerVersion: $GatewayServerVersion"
write-host "WebConsoleInstallDirectory: $WebConsoleInstallDirectory"
write-host "WebConsoleURInstallDate: $WebConsoleURInstallDate"
write-host "WebConsoleVersion: $WebConsoleVersion"
write-host "AuthenticationMode: $AuthenticationMode"
write-host "DefaultServer: $DefaultServer"
write-host "WebConsoleUrl: $WebConsoleUrl"
write-host "ApmAdvisorUrl: $ApmAdvisorUrl"
write-host "ApmDiagnosticsUrl: $ApmDiagnosticsUrl"
write-host "ReportServerInstallDirectory: $ReportServerInstallDirectory"
write-host "ReportServerURInstallDate: $ReportServerURInstallDate"
write-host "ReportServerVersion: $ReportServerVersion"
write-host "ReportServerDwDbServer: $ReportServerDwDbServer"
write-host "ReportServerDWDBName: $ReportServerDWDBName"
write-host "ReportServerUrl: $ReportServerUrl"
write-host "SRSInstance: $SRSInstance"
write-host "ReportServerServiceAccount: $ReportServerServiceAccount"
write-host "ReportServerServiceStartMode: $ReportServerServiceStartMode"
write-host "ConsoleInstallDirectory: $ConsoleInstallDirectory"
write-host "ConsoleURInstallDate: $ConsoleURInstallDate"
write-host "ConsoleVersion: $ConsoleVersion"
Write-Host "PSVersion: $$PSVersion" # Not returned as discovery data. Only used in events.
Write-Host "IgnoreMgmtGroups: $$IgnoreMgmtGroups" # Not returned as discovery data. Only used in events.
Write-Host "IgnoreAgentVersion: $$IgnoreAgentVersion" # Not returned as discovery data. Only used in events.
#>

# Add discovery data
$Instance=$DiscoveryData.CreateClassInstance("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']$")
$Instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/OperatingSystem$", $OperatingSystem)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/Product$", $Product)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/AgentInstallDirectory$", $AgentInstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/AgentURInstallDate$", $AgentURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/AgentVersion$", $AgentVersion)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/MGCount$", $MGCount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/MGFailovers$", $MGFailovers)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/HealthServiceAccount$", $HealthServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/HealthServiceStartMode$", $HealthServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/CertificateExpiryDate$", $CertificateExpiryDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ADIntegration$", $ADIntegration)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/APMInstalled$", $APMInstalled)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/APMServiceAccount$", $APMServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/APMServiceStartMode$", $APMServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSForwarderServiceAccount$", $ACSForwarderServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSForwarderServiceStartMode$", $ACSForwarderServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/TLS12$", $TLS12)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/LAWorkspaceCount$", $LAWorkspaceCount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/LAWorkspaces$", $LAWorkspaces)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/LAProxyUrl$", $Script:LAProxyUrl)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/LAProxyUsername$", $Script:LAProxyUsername)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ComputerType$", $ComputerType)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/MgmtServerInstallDirectory$", $MgmtServerInstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/MgmtServerURInstallDate$", $MgmtServerURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/MgmtServerVersion$", $MgmtServerVersion)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ConfigServiceAccount$", $ConfigServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ConfigServiceStartMode$", $ConfigServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/DataAccessServiceAccount$", $DataAccessServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/DataAccessServiceStartMode$", $DataAccessServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/OpsDbName$", $OpsDbName)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/OpsDbServer$", $OpsDbServer)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/DWDbName$", $DWDbName)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/DwDbServer$", $DwDbServer)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSCollector$", $ACSCollector)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSCollectorServiceAccount$", $ACSCollectorServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSCollectorServiceStartMode$", $ACSCollectorServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSCollectorURInstallDate$", $ACSCollectorURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ACSCollectorVersion$", $ACSCollectorVersion)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/RMS$", $RMS)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/GatewayServerInstallDirectory$", $GatewayServerInstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/GatewayServerURInstallDate$", $GatewayServerURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/GatewayServerVersion$", $GatewayServerVersion)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/WebConsoleInstallDirectory$", $WebConsoleInstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/WebConsoleURInstallDate$", $WebConsoleURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/WebConsoleVersion$", $WebConsoleVersion)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/AuthenticationMode$", $AuthenticationMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/DefaultServer$", $DefaultServer)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/WebConsoleUrl$", $WebConsoleUrl)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ApmAdvisorUrl$", $ApmAdvisorUrl)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ApmDiagnosticsUrl$", $ApmDiagnosticsUrl)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerInstallDirectory$", $ReportServerInstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerURInstallDate$", $ReportServerURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerVersion$", $ReportServerVersion)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerDwDbServer$", $ReportServerDwDbServer)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerDWDBName$", $ReportServerDWDBName)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerUrl$", $ReportServerUrl)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/SRSInstance$", $SRSInstance)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerServiceAccount$", $ReportServerServiceAccount)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ReportServerServiceStartMode$", $ReportServerServiceStartMode)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ConsoleInstallDirectory$", $ConsoleInstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ConsoleURInstallDate$", $ConsoleURInstallDate)
$Instance.AddProperty("$MPElement[Name='TestG.SCOM.Inventory.Windows.Class']/ConsoleVersion$", $ConsoleVersion)
$Instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
$DiscoveryData.AddInstance($Instance)

# Submit discovery data back to Operations Manager and complete the script.
$DiscoveryData

<# FOR TESTING
$ObjMomApi.Return($DiscoveryData)
#>
LogAndQuit
} # end try
Catch
{
TerminatingError
}
} # end function
GetWindowsInventory -SourceId $SourceId -ManagedEntityId $ManagedEntityId -ComputerName $ComputerName -IgnoreMgmtGroups $IgnoreMgmtGroups -IgnoreAgentVersion $IgnoreAgentVersion # Need this to pass params in properly.
# End Windows discovery
]]>
</ScriptBody>
<Parameters>
<Parameter>
<Name>SourceId</Name>
<Value>$MPElement$</Value>
</Parameter>
<Parameter>
<Name>ManagedEntityId</Name>
<Value>$Target/Id$</Value>
</Parameter>
<Parameter>
<Name>ComputerName</Name>
<Value>$Target/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value> <!--removed "Host" 15/7/20. WOW this actually fixed it.-->
</Parameter>
<Parameter>
<Name>IgnoreMgmtGroups</Name>
<Value>$Config/IgnoreMgmtGroups$</Value>
</Parameter>
<Parameter>
<Name>IgnoreAgentVersion</Name>
<Value>$Config/IgnoreAgentVersion$</Value>
</Parameter>
</Parameters>
<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
</DataSource>
</MemberModules>
<Composition>
<Node ID="DS" />
</Composition>
</Composite>
</ModuleImplementation>
<OutputType>System!System.Discovery.Data</OutputType>
</DataSourceModuleType>
<!--END WINDOWS DISCOVERY DSM-->

<!--GET LOG ANALYTICS WORKSPACES-->
<WriteActionModuleType ID="TestG.SCOM.Inventory.Task.WA" Accessibility="Internal" Batching="false">
<Configuration>
<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
</Configuration>
<OverrideableParameters>
<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
</OverrideableParameters>
<ModuleImplementation Isolation="Any">
<Composite>
<MemberModules>
<WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
<ScriptName>TestG.SCOM.Inventory.Task.WA.ps1</ScriptName>
<ScriptBody><![CDATA[
Function FoundNone {
$Script:Output="No Log Analytics workspaces found."
}

Function GetLAWorkspaces {
$CompName=$env:computername
Write-Host "====================================="
Write-Host "Computer: $CompName"
Write-Host "Task: Get Log Analytics workspaces"
Write-Host "====================================="
Write-Host
$LAWorkspaceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\HealthService\Parameters\Service Connector Services"
If (Test-Path $LAWorkspaceRegKey) {
$BindLAWorkspaceRegKey=Get-Item $LAWorkspaceRegKey
$LAWorkspaceCount=($BindLAWorkspaceRegKey).SubKeyCount
If ($LAWorkspaceCount -gt 0) {
$ArrayLAWorkspaces=$BindLAWorkspaceRegKey.GetSubKeyNames()
$ArrayLAWorkspaces | ForEach-Object {
$LAWorkspaceId=$_.Substring(16)
$LAWorkspaceTypeId=(Get-ItemProperty -Path $LAWorkspaceRegKey\$_)."Azure Cloud Type"
Switch ($LAWorkspaceTypeId) {
"0" {$LAWorkspaceType="Azure Commercial"; BREAK}
"1" {$LAWorkspaceType="Azure US Government"; BREAK}
"2" {$LAWorkspaceType="Azure China"; BREAK}
"3" {$LAWorkspaceType="Azure US Nat"; BREAK}
"4" {$LAWorkspaceType="Azure US Sec"; BREAK}
Default {
$LAWorkspaceType="Unknown"
}
}
$LAWorkspaceConnectionStatusId=(Get-ItemProperty -Path $LAWorkspaceRegKey\$_)."Connection Status"
If ($LAWorkspaceConnectionStatusId -eq 0) {
$LAWorkspaceConnectionStatus="Connected"
}
Else {
$LAWorkspaceConnectionStatus="Unknown"
}
$Output+="Workspace Id: $LAWorkspaceId`nCloud Type: $LAWorkspaceTypeId ($LAWorkspaceType)`nConnection Status: $LAWorkspaceConnectionStatusId ($LAWorkspaceConnectionStatus)`n`n"
} # END FOR
}
Else {
FoundNone
}
}
Else {
FoundNone
}
Write-Host $Output
}
GetLAWorkspaces
]]>
</ScriptBody>
<Parameters>
</Parameters>
<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
</WriteAction>
</MemberModules>
<Composition>
<Node ID="PSWA" />
</Composition>
</Composite>
</ModuleImplementation>
<OutputType>System!System.BaseData</OutputType>
<InputType>System!System.BaseData</InputType>
</WriteActionModuleType>
<!--END GET LOG ANALYTICS WORKSPACES-->

<!--GET TLS1.2 REGISTRY TASK-->
<WriteActionModuleType ID="TestG.SCOM.Inventory.TaskGetTLS12.WA" Accessibility="Internal" Batching="false">
<Configuration>
<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
</Configuration>
<OverrideableParameters>
<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
</OverrideableParameters>
<ModuleImplementation Isolation="Any">
<Composite>
<MemberModules>
<WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
<ScriptName>TestG.SCOM.Inventory.TaskGetTLS12.WA.ps1</ScriptName>
<ScriptBody><![CDATA[
Function CheckNull ($PassedInParam) {
If ([string]::IsNullOrEmpty($PassedInParam)) {
$Script:Message+="[WARNING] Missing value name: $_\$ValueToCheck`n"
}
Else {
$Script:Message+="[INFO] Found value: $_\$ValueToCheck=$PassedInParam`n"
}
}
Function RunScript {
$CompName=$env:computername
Write-Host "====================================="
Write-Host "Computer: $CompName"
Write-Host "Task: Get TLS1.2 registry settings"
Write-Host "====================================="
Write-Host
$ArrayTLS12NETEnabled="HKLM:\SOFTWARE\Microsoft\.NETFramework\v4.0.30319","HKLM:\SOFTWARE\WOW6432Node\Microsoft\.NETFramework\v4.0.30319"
$ArrayTLS12NETEnabled | ForEach-Object {
$Count+=1
If (Test-Path -Path $_) {
$SchUseStrongCrypto=(Get-ItemProperty $_).SchUseStrongCrypto
}
$ValueToCheck="SchUseStrongCrypto"; CheckNull $SchUseStrongCrypto
}
$ArrayTLS12OSRegKey="HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Client","HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Protocols\TLS 1.2\Server"
$ArrayTLS12OSRegKey | ForEach-Object {
If (Test-Path -Path $_) {
$Enabled=(Get-ItemProperty $_).Enabled
$DisabledByDefault=(Get-ItemProperty $_).DisabledByDefault
}
$ValueToCheck="Enabled"; CheckNull $Enabled
$ValueToCheck="DisabledByDefault"; CheckNull $DisabledByDefault
}
$Script:Message
}
RunScript
]]>
</ScriptBody>
<Parameters>
</Parameters>
<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
</WriteAction>
</MemberModules>
<Composition>
<Node ID="PSWA" />
</Composition>
</Composite>
</ModuleImplementation>
<OutputType>System!System.BaseData</OutputType>
<InputType>System!System.BaseData</InputType>
</WriteActionModuleType>
<!--END GET TLS1.2 REGISTRY TASK-->

<!--GET WINDOWS SERVICES TASK-->
<WriteActionModuleType ID="TestG.SCOM.Inventory.GetWinServices.WA" Accessibility="Internal" Batching="false">
<Configuration>
<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
</Configuration>
<OverrideableParameters>
<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
</OverrideableParameters>
<ModuleImplementation Isolation="Any">
<Composite>
<MemberModules>
<WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
<ScriptName>TestG.SCOM.Inventory.GetWinServices.WA.ps1</ScriptName>
<ScriptBody><![CDATA[
$CompName=$env:computername
Write-Host "====================================="
Write-Host "Computer: $CompName"
Write-Host "Task: Get Windows services"
Write-Host "====================================="
Write-Host
Write-Host "Note: Services have been sorted by the DisplayName property."
Write-Host
$Services=Get-CimInstance -ClassName Win32_Service | Sort-Object DisplayName | Select-Object -Property DisplayName,Name,State,StartMode,StartName,ProcessId
$Services | ForEach-Object {
$DisplayName=$_.DisplayName
$Name=$_.Name
$State=$_.State
$StartMode=$_.StartMode
$StartName=$_.StartName
$ProcessId=$_.ProcessId
$Output+="DISPLAY_NAME: $DisplayName`nSERVICE_NAME: $Name`nSTATUS: $State`nStartMode_TYPE: $StartMode`nLOG_ON_ACCOUNT: $StartName`nPROCESS_ID: $ProcessId`n`n"
}
$Output
]]>
</ScriptBody>
<Parameters>
</Parameters>
<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
</WriteAction>
</MemberModules>
<Composition>
<Node ID="PSWA" />
</Composition>
</Composite>
</ModuleImplementation>
<OutputType>System!System.BaseData</OutputType>
<InputType>System!System.BaseData</InputType>
</WriteActionModuleType>
<!--END GET WINDOWS SERVICES TASK-->

<!--GET WINDOWS DISK VOLUMES-->
<WriteActionModuleType ID="TestG.SCOM.Inventory.GetWinDiskVolumes.WA" Accessibility="Internal" Batching="false">
<Configuration>
<xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" 
xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
</Configuration>
<OverrideableParameters>
<OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
</OverrideableParameters>
<ModuleImplementation Isolation="Any">
<Composite>
<MemberModules>
<WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
<ScriptName>TestG.SCOM.Inventory.GetWinDiskVolumes.WA.ps1</ScriptName>
<ScriptBody><![CDATA[
$CompName=$env:computername
Write-Host "====================================="
Write-Host "Computer: $CompName"
Write-Host "Task: Get disk volumes"
Write-Host "====================================="
Write-Host
Set-Variable -Name "CONVERSION_FACTOR" -Value "1073741824"
Set-Variable -Name "FIXED_DISK" -Value "3"
$Volumes=Get-CimInstance -ClassName Win32_Volume | Where-Object DriveType -eq $FIXED_DISK | Sort-Object Name
$Volumes | ForEach-Object {
$Name=$_.Name
$Label=$_.Label
$DriveType=$_.DriveType
Switch ($DriveType) {
"0" {$DriveType="Unknown"; BREAK}
"1" {$DriveType="No Root Directory"; BREAK}
"2" {$DriveType="Removable Disk"; BREAK}
"3" {$DriveType="Local Disk"; BREAK}
"4" {$DriveType="Network Drive"; BREAK}
"5" {$DriveType="Compact Disc"; BREAK}
"6" {$DriveType="RAM Disk"; BREAK}
Default {$DriveType="Unknown"}
}
$FileSystem=$_.FileSystem
$VolumeCapacity="{0:n2}" -f ($_.Capacity / $CONVERSION_FACTOR)
$VolumeUsedSpace="{0:n2}" -f (($_.Capacity - $_.FreeSpace) / $CONVERSION_FACTOR)
$VolumeFreeSpace="{0:n2}" -f ($_.FreeSpace / $CONVERSION_FACTOR)
$DirtyBitSet=$_.DirtyBitSet
$Output+="VOLUME_NAME: $Name`nVOLUME_LABEL: $Label`nDRIVE_TYPE: $DriveType`nFILE_SYSTEM: $FileSystem`nCAPACITY: $VolumeCapacity GB`nUSED_SPACE: $VolumeUsedSpace GB`nFREE_SPACE: $VolumeFreeSpace GB`nDIRTY_BIT_SET: $DirtyBitSet   `n`n"
}
$Output
]]>
</ScriptBody>
<Parameters>
</Parameters>
<TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
</WriteAction>
</MemberModules>
<Composition>
<Node ID="PSWA" />
</Composition>
</Composite>
</ModuleImplementation>
<OutputType>System!System.BaseData</OutputType>
<InputType>System!System.BaseData</InputType>
</WriteActionModuleType>
<!--END GET WINDOWS DISK VOLUMES-->

<!--RESET AGENT HEALTH TASK-->
<WriteActionModuleType ID="Microsoft.SystemCenter.ResetServiceStoreAction" Comment="Request Health Service Store Reset" Accessibility="Internal" Batching="false">
<Configuration />
<ModuleImplementation Isolation="Any">
<Native>
<ClassID>B253A4FA-71BE-4F5D-94D5-A46B0D2505AA</ClassID>
</Native>
</ModuleImplementation>
<InputType>System!System.BaseData</InputType>
</WriteActionModuleType>

</ModuleTypes>
</TypeDefinitions>

<!--new-->
<Categories>
<Category ID="Cat.TestG.SCOM.Inventory.ConsolePing.Task" Target="TestG.SCOM.Inventory.ConsolePing.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" />
<Category ID="Cat.TestG.SCOM.Inventory.RDP.Task" Target="TestG.SCOM.Inventory.RDP.Task" Value="System!System.Internal.ManagementPack.ConsoleTasks.MonitoringObject" />
</Categories>

<Monitoring>

<!--DISCOVERIES-->
<Discoveries>

<!--WINDOWS DISCOVERY-->
<Discovery ID="TestG.SCOM.Inventory.Windows.ScriptDiscovery" Target="Windows!Microsoft.Windows.Computer" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
<Category>Discovery</Category>
<DiscoveryTypes>
<DiscoveryClass TypeID="TestG.SCOM.Inventory.Windows.Class">
<Property PropertyID="OperatingSystem"/>
<Property PropertyID="Product"/>
<Property PropertyID="AgentInstallDirectory"/>
<Property PropertyID="AgentURInstallDate"/>
<Property PropertyID="AgentVersion"/>
<Property PropertyID="MGCount"/>
<Property PropertyID="MGFailovers"/>
<Property PropertyID="HealthServiceAccount"/>
<Property PropertyID="HealthServiceStartMode"/>
<Property PropertyID="CertificateExpiryDate"/>
<Property PropertyID="ADIntegration"/>
<Property PropertyID="APMInstalled"/>
<Property PropertyID="APMServiceAccount"/>
<Property PropertyID="APMServiceStartMode"/>
<Property PropertyID="ACSForwarderServiceAccount"/>
<Property PropertyID="ACSForwarderServiceStartMode"/>
<Property PropertyID="TLS12"/>
<Property PropertyID="LAWorkspaceCount"/>
<Property PropertyID="LAWorkspaces"/>
<Property PropertyID="LAProxyUrl"/>
<Property PropertyID="LAProxyUsername"/>
<Property PropertyID="ComputerType"/>
<Property PropertyID="MgmtServerInstallDirectory"/>
<Property PropertyID="MgmtServerURInstallDate"/>
<Property PropertyID="MgmtServerVersion"/>
<Property PropertyID="ConfigServiceAccount"/>
<Property PropertyID="ConfigServiceStartMode"/>
<Property PropertyID="DataAccessServiceAccount"/>
<Property PropertyID="DataAccessServiceStartMode"/>
<Property PropertyID="OpsDbName"/>
<Property PropertyID="OpsDbServer"/>
<Property PropertyID="DWDbName"/>
<Property PropertyID="DwDbServer"/>
<Property PropertyID="ACSCollector"/>
<Property PropertyID="ACSCollectorServiceAccount"/>
<Property PropertyID="ACSCollectorServiceStartMode"/>
<Property PropertyID="ACSCollectorURInstallDate"/>
<Property PropertyID="ACSCollectorVersion"/>
<Property PropertyID="RMS"/>
<Property PropertyID="GatewayServerInstallDirectory"/>
<Property PropertyID="GatewayServerURInstallDate"/>
<Property PropertyID="GatewayServerVersion"/>
<Property PropertyID="WebConsoleInstallDirectory"/>
<Property PropertyID="WebConsoleURInstallDate"/>
<Property PropertyID="WebConsoleVersion"/>
<Property PropertyID="AuthenticationMode"/>
<Property PropertyID="DefaultServer"/>
<Property PropertyID="WebConsoleUrl"/>
<Property PropertyID="ApmAdvisorUrl"/>
<Property PropertyID="ApmDiagnosticsUrl"/>
<Property PropertyID="ReportServerInstallDirectory"/>
<Property PropertyID="ReportServerURInstallDate"/>
<Property PropertyID="ReportServerVersion"/>
<Property PropertyID="ReportServerDwDbServer"/>
<Property PropertyID="ReportServerDWDBName"/>
<Property PropertyID="ReportServerUrl"/>
<Property PropertyID="SRSInstance"/>
<Property PropertyID="ReportServerServiceAccount"/>
<Property PropertyID="ReportServerServiceStartMode"/>
<Property PropertyID="ConsoleInstallDirectory"/>
<Property PropertyID="ConsoleURInstallDate"/>
<Property PropertyID="ConsoleVersion"/>
</DiscoveryClass>
</DiscoveryTypes>
<DataSource ID="DS" TypeID="TestG.SCOM.Inventory.Discovery.WindowsDataSource">
<IntervalSeconds>60</IntervalSeconds> <!--REMEMBER TO CHANGE THIS!!!!!!!!!!!!!-->
<SyncTime></SyncTime>
<TimeoutSeconds>120</TimeoutSeconds>
<IgnoreMgmtGroups></IgnoreMgmtGroups>          <!--Don't put anything here else it will get passed in.-->
<IgnoreAgentVersion>false</IgnoreAgentVersion>
</DataSource>
</Discovery>



</Discoveries>

<!--Rules-->

<!--Tasks-->
<Tasks>

<Task ID="TestG.SCOM.Inventory.Task.agent" Accessibility="Public" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" Timeout="120" Remotable="true">
<Category>Maintenance</Category>
<WriteAction ID="PSWA" TypeID="TestG.SCOM.Inventory.Task.WA">
<TimeoutSeconds>180</TimeoutSeconds>
</WriteAction>
</Task>

<Task ID="TestG.SCOM.Inventory.TaskGetTLS12" Accessibility="Public" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" Timeout="120" Remotable="true">
<Category>Maintenance</Category>
<WriteAction ID="PSWA" TypeID="TestG.SCOM.Inventory.TaskGetTLS12.WA">
<TimeoutSeconds>180</TimeoutSeconds>
</WriteAction>
</Task>

<!--get windows services-->
<Task ID="TestG.SCOM.Inventory.GetWinServices" Accessibility="Public" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" Timeout="120" Remotable="true">
<Category>Maintenance</Category>
<WriteAction ID="PSWA" TypeID="TestG.SCOM.Inventory.GetWinServices.WA">
<TimeoutSeconds>180</TimeoutSeconds>
</WriteAction>
</Task>

<!--get windows services-->
<Task ID="TestG.SCOM.Inventory.GetWinDiskVolumes" Accessibility="Public" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" Timeout="120" Remotable="true">
<Category>Maintenance</Category>
<WriteAction ID="PSWA" TypeID="TestG.SCOM.Inventory.GetWinDiskVolumes.WA">
<TimeoutSeconds>180</TimeoutSeconds>
</WriteAction>
</Task>

<!--reset health-->
<Task ID="TestG.SCOM.Inventory.ResetAgentHealth" Comment="Request Health Service Store Reset" Accessibility="Internal" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" Timeout="300" Remotable="true">
<Category>Maintenance</Category>
<WriteAction ID="ResetServiceStore" TypeID="Microsoft.SystemCenter.ResetServiceStoreAction" />
</Task>

</Tasks>

<!--Monitors-->
<Monitors>
<UnitMonitor ID="TestG.SCOM.Inventory.Monitoring.EventMonitor" Accessibility="Public" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="true">
<Category>Custom</Category>
<AlertSettings AlertMessage="TestG.SCOM.Inventory.Monitoring.EventMonitor.AlertMessage">
<AlertOnState>Warning</AlertOnState>
<AutoResolve>true</AutoResolve>
<AlertPriority>Low</AlertPriority>
<AlertSeverity>Information</AlertSeverity>
<AlertParameters>
<AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
</AlertParameters>
</AlertSettings>
<OperationalStates>
<OperationalState ID="OpsStateWarning" MonitorTypeStateID="FirstEventRaised" HealthState="Warning" />
<OperationalState ID="OpsStateHealthy" MonitorTypeStateID="SecondEventRaised" HealthState="Success" />
</OperationalStates>
<Configuration>
<FirstComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</FirstComputerName>
<FirstLogName>Operations Manager</FirstLogName>
<FirstExpression>
<And>
<Expression>
<SimpleExpression>
<ValueExpression>
<XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
</ValueExpression>
<Operator>Equal</Operator>
<ValueExpression>
<Value Type="UnsignedInteger">17611</Value>
</ValueExpression>
</SimpleExpression>
</Expression>
<Expression>
<SimpleExpression>
<ValueExpression>
<XPathQuery Type="String">PublisherName</XPathQuery>
</ValueExpression>
<Operator>Equal</Operator>
<ValueExpression>
<Value Type="String">Health Service Script</Value>
</ValueExpression>
</SimpleExpression>
</Expression>
</And>
</FirstExpression>
<SecondComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</SecondComputerName>
<SecondLogName>Operations Manager</SecondLogName>
<SecondExpression>
<And>
<Expression>
<SimpleExpression>
<ValueExpression>
<XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
</ValueExpression>
<Operator>Equal</Operator>
<ValueExpression>
<Value Type="UnsignedInteger">17610</Value>
</ValueExpression>
</SimpleExpression>
</Expression>
<Expression>
<SimpleExpression>
<ValueExpression>
<XPathQuery Type="String">PublisherName</XPathQuery>
</ValueExpression>
<Operator>Equal</Operator>
<ValueExpression>
<Value Type="String">Health Service Script</Value>
</ValueExpression>
</SimpleExpression>
</Expression>
</And>
</SecondExpression>
</Configuration>
</UnitMonitor>
</Monitors>
</Monitoring>
<Presentation>

<!--new-->
<ConsoleTasks>
<ConsoleTask ID="TestG.SCOM.Inventory.ConsolePing.Task" Accessibility="Internal" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" RequireOutput="true">
<Assembly>Res.TestG.SCOM.Inventory.ConsolePing.Task</Assembly>
<Handler>ShellHandler</Handler>
<Parameters>
<Argument Name="WorkingDirectory" />
<Argument Name="Application">%windir%\system32\ping.exe</Argument>
<Argument>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Argument>
</Parameters>
</ConsoleTask>

<!--new-->
<ConsoleTask ID="TestG.SCOM.Inventory.RDP.Task" Accessibility="Internal" Enabled="true" Target="TestG.SCOM.Inventory.Windows.Class" RequireOutput="false">
<Assembly>Res.TestG.SCOM.Inventory.RDP.Task</Assembly>
<Handler>ShellHandler</Handler>
<Parameters>
<Argument Name="WorkingDirectory" />
<Argument Name="Application">%windir%\system32\mstsc.exe</Argument>
<Argument>/v:</Argument>
<Argument>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$ /f</Argument>
</Parameters>
</ConsoleTask>
</ConsoleTasks>

<StringResources>
<StringResource ID="TestG.SCOM.Inventory.Monitoring.EventMonitor.AlertMessage" />
</StringResources>
</Presentation>
<LanguagePacks>
<LanguagePack ID="ENU" IsDefault="true">
<DisplayStrings>

<!--MANAGEMENT PACK-->
<DisplayString ElementID="TestG.SCOM.Inventory.Monitoring">
<Name>TestG SCOM Inventory (Monitoring)</Name>
<Description>Scripts and utilities that collect inventory information about the SCOM management group. Created by the Workplace and Mobility monitoring team.</Description>
</DisplayString>

<!--WINDOWS CLASS-->
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class">
<Name>TestG SCOM Inventory Windows</Name>
<Description></Description>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="OperatingSystem">
<Name>Operating System</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="Product">
<Name>Product</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="AgentInstallDirectory">
<Name>Agent Install Directory</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="AgentURInstallDate">
<Name>Agent UR Install Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="AgentVersion">
<Name>Agent Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="MGCount">
<Name>MG Count</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="MGFailovers">
<Name>MG Failovers</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="HealthServiceAccount">
<Name>Health Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="HealthServiceStartMode">
<Name>Health Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="CertificateExpiryDate">
<Name>Certificate Expiry Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ADIntegration">
<Name>AD Integration</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="APMInstalled">
<Name>APM Installed</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="APMServiceAccount">
<Name>APM Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="APMServiceStartMode">
<Name>APM Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSForwarderServiceAccount">
<Name>ACS Forwarder Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSForwarderServiceStartMode">
<Name>ACS Forwarder Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="TLS12">
<Name>TLS 1.2</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="LAWorkspaceCount">
<Name>LA Workspace Count</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="LAWorkspaces">
<Name>LA Workspaces</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="LAProxyUrl">
<Name>LA ProxyUrl</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="LAProxyUsername">
<Name>LA Proxy Username</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ComputerType">
<Name>Computer Type</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="MgmtServerInstallDirectory">
<Name>Mgmt Server Install Directory</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="MgmtServerURInstallDate">
<Name>Mgmt Server UR Install Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="MgmtServerVersion">
<Name>Mgmt Server Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ConfigServiceAccount">
<Name>Config Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ConfigServiceStartMode">
<Name>Config Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="DataAccessServiceAccount">
<Name>Data Access Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="DataAccessServiceStartMode">
<Name>Data Access Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="OpsDbName">
<Name>Operations Manager Database Name</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="OpsDbServer">
<Name>Operations Manager Database Server</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="DWDbName">
<Name>Data Warehouse Database Name</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="DwDbServer">
<Name>Data Warehouse Database Server</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSCollector">
<Name>ACS Collector</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSCollectorServiceAccount">
<Name>ACS Collector Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSCollectorServiceStartMode">
<Name>ACS Collector Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSCollectorURInstallDate">
<Name>ACS Collector UR Install Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ACSCollectorVersion">
<Name>ACS Collector Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="RMS">
<Name>RMS</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="GatewayServerInstallDirectory">
<Name>Gateway Server Install Directory</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="GatewayServerURInstallDate">
<Name>Gateway Server UR Install Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="GatewayServerVersion">
<Name>Gateway Server Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="WebConsoleInstallDirectory">
<Name>Web Console Install Directory</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="WebConsoleURInstallDate">
<Name>Web Console UR Install Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="WebConsoleVersion">
<Name>Web Console Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="AuthenticationMode">
<Name>Authentication Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="DefaultServer">
<Name>Default Server</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="WebConsoleUrl">
<Name>Web Console Url</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ApmAdvisorUrl">
<Name>Apm Advisor Url</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ApmDiagnosticsUrl">
<Name>Apm Diagnostics Url</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerInstallDirectory">
<Name>Report Server Install Directory</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerServiceAccount">
<Name>Report Server Service Account</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerServiceStartMode">
<Name>Report Server Service Start Mode</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerURInstallDate">
<Name>Report Server UR Install Date (YMD)</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerVersion">
<Name>Report Server Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerDwDbServer">
<Name>Data Warehouse Database Server</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerDWDBName">
<Name>Data Warehouse Database Name</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ReportServerUrl">
<Name>Report Server Url</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="SRSInstance">
<Name>SRS Instance</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ConsoleVersion">
<Name>Console Version</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ConsoleInstallDirectory">
<Name>Console Install Directory</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.Class" SubElementID="ConsoleURInstallDate">
<Name>Console UR Install Date (YMD)</Name>
</DisplayString>
<!--END WINDOWS CLASS-->


<!--WINDOWS CLASS DISCOVERY-->
<DisplayString ElementID="TestG.SCOM.Inventory.Windows.ScriptDiscovery">
<Name>TestG SCOM Inventory Windows Script Discovery</Name>
<Description>redo? - PowerShell script that get properties of 'TestG.SCOM.Inventory.Windows.Class'.</Description>
</DisplayString>

<!--agent script monitor-->
<DisplayString ElementID="TestG.SCOM.Inventory.Monitoring.EventMonitor">
<Name>Test - SCOM Inventory script had errors</Name>
<Description>add later</Description>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Monitoring.EventMonitor" SubElementID="OpsStateHealthy">
<Name>Event Raised</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Monitoring.EventMonitor" SubElementID="OpsStateWarning">
<Name>Missing Event Raised</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Monitoring.EventMonitor.AlertMessage">
<Name>Test Alert - SCOM Inventory script had errors</Name>
<Description>{0}</Description>
</DisplayString>
<!--universal task-->
<DisplayString ElementID="TestG.SCOM.Inventory.Task.agent">
<Name>Get LA Workspaces - agent</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.TaskGetTLS12">
<Name>Get TLS 1.2 reg settings</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.Discovery.WindowsDataSource">
<Name>TestG.SCOM.Inventory.Discovery.WindowsDataSource</Name>
</DisplayString>

<!--new-->
<DisplayString ElementID="TestG.SCOM.Inventory.ConsolePing.Task">
<Name>Ping</Name>
</DisplayString>
<DisplayString ElementID="TestG.SCOM.Inventory.RDP.Task">
<Name>RDP</Name>
</DisplayString>

<DisplayString ElementID="TestG.SCOM.Inventory.GetWinServices">
<Name>Get services</Name>
</DisplayString>

<DisplayString ElementID="TestG.SCOM.Inventory.GetWinDiskVolumes">
<Name>Get disk volumes</Name>
</DisplayString>

<DisplayString ElementID="TestG.SCOM.Inventory.ResetAgentHealth">
<Name>Flush Cache</Name>
<Description>This task was copied from the original Microsoft task, I've just included it here for convenience. When you run this task it logs an event to the Operations Manager log on the agent with these properties: Id =103, Level=Warning, Source=HealthService.</Description>
</DisplayString>

</DisplayStrings>

<KnowledgeArticles>
<KnowledgeArticle ElementID="TestG.SCOM.Inventory.Monitoring" Visible="true">
<MamlContent>
<maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
<maml:title>Here's a title.</maml:title>
<maml:para>Line 1.</maml:para>
<maml:para>Line 2.</maml:para>
<maml:list>
<maml:listItem>
<maml:para>Bullet Point 1.</maml:para>
</maml:listItem>
<maml:listItem>
<maml:para>Bullet Point 2.</maml:para>
</maml:listItem>
<maml:listItem>
<maml:para>Bullet Point 3.</maml:para>
</maml:listItem>
</maml:list>
</maml:section>
</MamlContent>
</KnowledgeArticle>
<KnowledgeArticle ElementID="TestG.SCOM.Inventory.Monitoring.EventMonitor" Visible="true">
<MamlContent>
<maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
<maml:title>Here's my monitor.</maml:title>
<maml:para>Line 1.</maml:para>
<maml:para>Line 2.</maml:para>
</maml:section>
</MamlContent>
</KnowledgeArticle>
</KnowledgeArticles>
</LanguagePack>
</LanguagePacks>
<Resources>
<Assembly ID="Res.TestG.SCOM.Inventory.ConsolePing.Task" Accessibility="Public" FileName="TestG.SCOM.Inventory.ConsolePing.Task" HasNullStream="true" QualifiedName="TestG.SCOM.Inventory.ConsolePing.Task" />
<Assembly ID="Res.TestG.SCOM.Inventory.RDP.Task" Accessibility="Public" FileName="TestG.SCOM.Inventory.RDP.Task" HasNullStream="true" QualifiedName="TestG.SCOM.Inventory.RDP.Task" />
</Resources>
</ManagementPack>