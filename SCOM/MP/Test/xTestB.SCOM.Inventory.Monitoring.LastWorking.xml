<ManagementPack ContentReadable="true" SchemaVersion="2.0" OriginalSchemaVersion="1.1" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <Manifest>
    <Identity>
      <ID>TestB.SCOM.Inventory.Monitoring</ID>
      <Version>1.0.0.3</Version>
    </Identity>
    <Name>TestB.SCOM.Inventory.Monitoring</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="SystemCenter">
        <ID>Microsoft.SystemCenter.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8433.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <EntityTypes>
      <ClassTypes>
      <!--Create a base class so we can target workflows that will apply to all child classes. It avoids duplicating workflows.-->
        <ClassType ID="TestB.SCOM.Inventory.Base.Class" Accessibility="Public" Abstract="false" Base="Windows!Microsoft.Windows.LocalApplication" Hosted="true" Singleton="false" Extension="false" />
        <ClassType ID="TestB.SCOM.Inventory.WindowsAgent.Class" Base="TestB.SCOM.Inventory.Base.Class" Accessibility="Public" Abstract="false" Hosted="true" Singleton="false">
          <Property ID="OperatingSystem" Type="string"/>
          <Property ID="AgentVersion" Type="string"/>
          <Property ID="InstallDirectory" Type="string"/>
          <Property ID="HealthServiceLogOn" Type="string"/>
          <Property ID="LastUpdated" Type="string"/>
          <Property ID="CertificateExpiry" Type="string"/>
          <Property ID="ManagementGroups" Type="string"/>
          <Property ID="ADIntegration" Type="string"/>
          <Property ID="APMService" Type="string"/>
          <Property ID="ACSAgentService" Type="string"/>
          <Property ID="LAWorkspaces" Type="string"/>
          <Property ID="LAProxyUrl" Type="string"/>
          <Property ID="LAProxyUsername" Type="string"/>
          <Property ID="ComputerType" Type="string"/>
        </ClassType>
      </ClassTypes>
    </EntityTypes>
    <ModuleTypes>
      <WriteActionModuleType ID="Company.AppName.TaskName.Task.WA" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="TimeoutSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="TimeoutSeconds" Selector="$Config/TimeoutSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <WriteAction ID="PSWA" TypeID="Windows!Microsoft.Windows.PowerShellWriteAction">
                <ScriptName>Company.AppName.TaskName.Task.WA.ps1</ScriptName>
                <ScriptBody><![CDATA[
$AgentConfig = New-Object -ComObject "AgentConfigManager.MgmtSvcCfg" # Agent config API object.
$ArrayLAWorkspaces=$AgentConfig.GetCloudWorkspaces() | Sort-Object
If (($ArrayLAWorkspaces | Measure-Object).Count -gt 0) { # Use Measure-Object because on some PS versions $variable.count doesn't work.
  ForEach ($LAWorkspace In $ArrayLAWorkspaces) {
    Write-Host "Workspace Id:" $ArrayLAWorkspaces.workspaceId
    Write-Host "Agent Id:" $ArrayLAWorkspaces.AgentId
    Write-Host "Azure Cloud Type:" $ArrayLAWorkspaces.AzureCloudType
    Write-Host "Connection Status:" $ArrayLAWorkspaces.ConnectionStatus
    Write-Host "Connection Status Text:" $ArrayLAWorkspaces.ConnectionStatusText
    Write-Host "`r"} # Add a line space if there's multiple workspaces.
} Else {
  Write-Host "No Log Analytics workspaces found."
}
                    ]]>
                </ScriptBody>
                <Parameters>
                </Parameters>
                <TimeoutSeconds>$Config/TimeoutSeconds$</TimeoutSeconds>
              </WriteAction>
            </MemberModules>
            <Composition>
              <Node ID="PSWA" />
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
        <InputType>System!System.BaseData</InputType>
      </WriteActionModuleType>
    </ModuleTypes>
  </TypeDefinitions>
  <Monitoring>
    <Discoveries>
      <Discovery ID="TestB.SCOM.Inventory.WindowsAgent.ScriptDiscovery" Target="SystemCenter!Microsoft.SystemCenter.Agent" Enabled="true" ConfirmDelivery="false" Remotable="true" Priority="Normal">
        <Category>Discovery</Category>
        <DiscoveryTypes>
          <DiscoveryClass TypeID="TestB.SCOM.Inventory.WindowsAgent.Class">
            <Property PropertyID="OperatingSystem"/>
            <Property PropertyID="AgentVersion"/>
            <Property PropertyID="InstallDirectory"/>
            <Property PropertyID="HealthServiceLogOn"/>
            <Property PropertyID="LastUpdated"/>
            <Property PropertyID="CertificateExpiry"/>
            <Property PropertyID="ManagementGroups"/>
            <Property PropertyID="ADIntegration"/>
            <Property PropertyID="APMService"/>
            <Property PropertyID="ACSAgentService"/>
            <Property PropertyID="LAWorkspaces"/>
            <Property PropertyID="LAProxyUrl"/>
            <Property PropertyID="LAProxyUsername"/>
            <Property PropertyID="ComputerType"/>
          </DiscoveryClass>
        </DiscoveryTypes>
        <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedPowerShell.DiscoveryProvider">
          <IntervalSeconds>3600</IntervalSeconds>
          <SyncTime />
          <ScriptName>TestB.SCOMAgentInventory.ps1</ScriptName>
          <ScriptBody><![CDATA[
Param ($SourceId,$ManagedEntityId,$ComputerName) # Need this to pass params in properly.

<#**************************************** LOG & QUIT ****************************************#>
Function LogAndQuit {
If ($script:CountWarning -gt 0) {
$EventId=17611
$EventLevel=2
} Else {
$EventId=17610
$EventLevel=0
}
# Use MOMScriptAPI.LogScriptEvent method to log events because Write-EventLog doesn't work on new OSs.
$MomApi.LogScriptEvent("TestB.SCOMAgentInventory.ps1", $EventId, $EventLevel, "SCOM agent inventory discovery script executed.`rWorkflow Name: TestB.SCOM.Inventory.WindowsAgent.ScriptDiscovery`rManagement Pack: TestB.SCOM.Inventory.Monitoring (1.0.0.3)`rPowerShell Version: $PSVersion`r$Script:Message`r$Error") # The $Error here will dump any errors into the event, don't know if we need it yet.
}

<#**************************************** CHECK NULLS ****************************************#>
Function CheckNull ($varValue) {
If ([string]::IsNullOrEmpty($varValue)) {
$script:CountWarning+=1
$script:Message+="[WARNING] Missing value for $varName.`r"
}}

<#**************************************** GET AGENT INVENTORY ****************************************#>
Function GetAgentInventory {
Param ($SourceId,$ManagedEntityId,$ComputerName) # Need this to pass params in properly.
$ErrorActionPreference="Continue"
<# FOR TESTING
$SourceId='{00000000-0000-0000-0000-000000000000}'
$ManagedEntityId='{00000000-0000-0000-0000-000000000000}'
$ComputerName='SRV1.test.local'
#>

# Load objects that let us get the job done.
$MomApi=New-Object -comObject 'MOM.ScriptAPI' # MOMScriptAPI object.
$DiscoveryData=$MomApi.CreateDiscoveryData(0, $SourceId, $ManagedEntityId) # Create MOMDiscoveryData object to store discovery data.
$AgentConfig = New-Object -ComObject "AgentConfigManager.MgmtSvcCfg" # Agent config API object.

# Get powershell version. This is shown in events to assist troubleshooting when powershell doesn't play nice.
$PSVersion=$PSVersionTable.PSVersion
[string]$PSMajor=$PSVersion.Major
[string]$PSMinor=$PSVersion.Minor
[string]$PSPatch=$PSVersion.Patch
$PSVersion=$PSMajor + "." + $PSMinor + "." + $PSPatch

# Get operating system.
$OSRegKey="HKLM:\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion"
If (Test-Path -Path $OSRegKey) {
$OperatingSystem=(Get-ItemProperty $OSRegKey).ProductName
}
$Script:varName="OperatingSystem"; CheckNull $OperatingSystem # Expect a value so check it.

# Get agent install directory.
$SetupRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Setup"
If (Test-Path -Path $SetupRegKey) {
$InstallDirectory=(Get-ItemProperty $SetupRegKey).InstallDirectory.TrimEnd("\")
}
$Script:varName="InstallDirectory"; CheckNull $InstallDirectory # Expect a value so check it.

# This seems to be the most accurate way to get the agent version as it includes update rollup info.
$AgentFile="$InstallDirectory\Tools\TMF\OMAgentTraceTMFVer.Dll"
If (Test-Path -Path $AgentFile) {
$AgentFile=Get-Item $InstallDirectory\Tools\TMF\OMAgentTraceTMFVer.Dll
$AgentVersion=$AgentFile.VersionInfo.FileVersion
}

Switch($AgentVersion) {
# SCOM 2012 R2
"7.1.10184.0" {$AgentVersion="7.1.10184.0 (2012 R2 RTM)"; BREAK}
"7.1.10195.0" {$AgentVersion="7.1.10195.0 (2012 R2 UR2)"; BREAK}
"7.1.10204.0" {$AgentVersion="7.1.10204.0 (2012 R2 UR3)"; BREAK}
"7.1.10211.0" {$AgentVersion="7.1.10211.0 (2012 R2 UR4)"; BREAK}
"7.1.10213.0" {$AgentVersion="7.1.10213.0 (2012 R2 UR5)"; BREAK}
"7.1.10218.0" {$AgentVersion="7.1.10218.0 (2012 R2 UR6)"; BREAK}
"7.1.10229.0" {$AgentVersion="7.1.10229.0 (2012 R2 UR7)"; BREAK}
"7.1.10241.0" {$AgentVersion="7.1.10241.0 (2012 R2 UR8)"; BREAK}
"7.1.10268.0" {$AgentVersion="7.1.10268.0 (2012 R2 UR9)"; BREAK}
"7.1.10285.0" {$AgentVersion="7.1.10285.0 (2012 R2 UR11)"; BREAK}
"7.1.10292.0" {$AgentVersion="7.1.10292.0 (2012 R2 UR12)"; BREAK}
"7.1.10302.0" {$AgentVersion="7.1.10302.0 (2012 R2 UR13)"; BREAK}
"7.1.10305.0" {$AgentVersion="7.1.10305.0 (2012 R2 UR14)"; BREAK}
# SCOM 2016
"8.0.10918.0" {$AgentVersion="8.0.10918.0 (2016 RTM)"; BREAK}
"8.0.10931.0" {$AgentVersion="8.0.10931.0 (2016 UR1)"; BREAK}
"8.0.10949.0" {$AgentVersion="8.0.10949.0 (2016 UR2)"; BREAK}
"8.0.10970.0" {$AgentVersion="8.0.10970.0 (2016 UR3)"; BREAK}
"8.0.10977.0" {$AgentVersion="8.0.10977.0 (2016 UR4)"; BREAK}
"8.0.10990.0" {$AgentVersion="8.0.10990.0 (2016 UR5)"; BREAK}
"8.0.11004.0" {$AgentVersion="8.0.11004.0 (2016 UR6)"; BREAK}
"8.0.11025.0" {$AgentVersion="8.0.11025.0 (2016 UR7)"; BREAK}
"8.0.11037.0" {$AgentVersion="8.0.11037.0 (2016 UR8)"; BREAK}
"8.0.11049.0" {$AgentVersion="8.0.11049.0 (2016 UR9)"; BREAK}
# SEMI ANNUAL Channel
"8.0.13053.0" {$AgentVersion="8.0.13053.0 (1801)"; BREAK}
"8.0.13067.0" {$AgentVersion="8.0.13067.0 (1807)"; BREAK}
# SCOM 2019
"10.19.10003.0" {$AgentVersion="10.19.10003.0 (2019 Technical Preview)"; BREAK}
"10.19.10014.0" {$AgentVersion="10.19.10014.0 (2019 RTM)"; BREAK}
"10.19.10140.0" {$AgentVersion="10.19.10140.0 (2019 UR1)"; BREAK}
Default {$AgentVersion=$AgentVersion + " (Unknown version)"}
}
$Script:varName="AgentVersion"; CheckNull $AgentVersion # Expect a value so check it.

# This shows the last time the agent software was modified i.e. update rollup installed.
$LastUpdated=$AgentFile.LastAccessTime.ToString("yyyy-MM-dd") # The date in this file changes each time an update rollup is installed.
$Script:varName="LastUpdated"; CheckNull $LastUpdated # Expect a value so check it.

# Get HealthService log on account.
$HealthServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\HealthService"
If (Test-Path $HealthServiceRegKey) {
$HealthServiceLogOn=(Get-ItemProperty $HealthServiceRegKey).ObjectName
}
$Script:varName="HealthService"; CheckNull $HealthServiceLogOn # Expect a value so check it.

# Get certificate info.
$CertRegKey="HKLM:\SOFTWARE\Microsoft\Microsoft Operations Manager\3.0\Machine Settings"
If (Test-Path $CertRegKey) {
If ((Get-ItemProperty $CertRegKey).ChannelCertificateHash) {
$Hash=(Get-ItemProperty $CertRegKey).ChannelCertificateHash
$Thumbprint=Get-ChildItem -Path cert:\LocalMachine\My | Where-Object {$_.Thumbprint -eq $Hash}
$CertificateExpiry=$Thumbprint.NotAfter.ToString("yyyy-MM-dd")
$Script:varName="CertificateExpiry"; CheckNull $CertificateExpiry # Expect a value so check it.
} Else {
$CertificateExpiry="None"
}
}

# Get AD Integration setting.
If ($AgentConfig.ActiveDirectoryIntegrationEnabled -eq $True) {
$ADIntegration="Enabled"} Else {
$ADIntegration="Disabled"
}
$Script:varName="ADIntegration"; CheckNull $ADIntegration # Expect a value so check it.

# Get management groups.
$ArrayManagementGroups=$AgentConfig.GetManagementGroups() | Sort-Object # Sort for console views.
If (($ArrayManagementGroups | Measure-Object).Count -gt 0) { # Use Measure-Object because on some PS versions $variable.count doesn't work.
  ForEach ($ManagementGroup In $ArrayManagementGroups) {
    $ManagementGroupName=$ManagementGroup.managementGroupName # get the mgmt name.
    $AgentFile="$InstallDirectory\Health Service State\Connector Configuration Cache\$ManagementGroupName\OpsMgrConnector.Config.xml"
    If (Test-Path -Path $AgentFile) {
      [xml]$ConfigFileXML = Get-Content -Path $AgentFile
      $ArrayPrimary=$ConfigFileXML.Message.State.Parents.Added.Item | Where-Object {$_.IsPrimary -eq "True"}
      $PrimaryMS=$ArrayPrimary.AuthenticationName # Don't check for validity. For this script to run it means it's communicating with it's primary server properly.
      $ArrayFailover=$ConfigFileXML.Message.State.Parents.Added.Item | Where-Object {$_.IsPrimary -eq "False"} | Sort-Object AuthenticationName
      $FailoverMS=$null # need to reset $FailoverMS otherwise it adds existing failovers each time it loops.
      If (($ArrayFailover | Measure-Object).Count -gt 0) {
        ForEach ($Failover in $ArrayFailover) {
          $FailoverMS+=$Failover.AuthenticationName + ","
        }
        $FailoverMS=$FailoverMS.TrimEnd(",")
      } Else {
        $script:Message+="[WARNING] No failover servers configured for management group '$ManagementGroupName'.`r"
      }
      $ManagementGroups+="MGName=" + $ManagementGroupName + ",PrimaryMS=" + $PrimaryMS + ",FailoverMS=" + $FailoverMS + ";"
    } Else {
      $script:Message+="[WARNING] Management group '$ManagementGroupName' has no OpsMgrConnector.Config.xml file.`r"
    }
  }
  $ManagementGroups=$ManagementGroups.TrimEnd(";")
} Else {
$ManagementGroups="None"
}

# Get APM service startup type.
$APMServiceRegKey="HKLM:\SYSTEM\CurrentControlSet\Services\System Center Management APM"
If (Test-Path $APMServiceRegKey) {
$APMService=(Get-ItemProperty $APMServiceRegKey).Start
Switch ($APMService) {
"2" {$APMService="Automatic"; BREAK}
"3" {$APMService="Manual"; BREAK}
"4" {$APMService="Disabled"; BREAK}
}} Else {
$APMService="Not Installed"
}

# Get ACS forwarder setting.
$ACSAgentServiceRegKey="HKLM:SYSTEM\CurrentControlSet\Services\AdtAgent"
If (Test-Path $ACSAgentServiceRegKey) {
$ACSAgentService=(Get-ItemProperty $ACSAgentServiceRegKey).Start
Switch ($ACSAgentService) {
"2" {$ACSAgentService="Automatic"; BREAK}
"3" {$ACSAgentService="Manual"; BREAK}
"4" {$ACSAgentService="Disabled"; BREAK}
}}
$Script:varName="ACSAgentService"
CheckNull $ACSAgentService # Expect a value so check it.

# Log Analytics - get workspaces.
$ArrayLAWorkspaces=$AgentConfig.GetCloudWorkspaces() | Sort-Object # Sort for console views.
If (($ArrayLAWorkspaces | Measure-Object).Count -gt 0) { # Use Measure-Object because on some PS versions $variable.count doesn't work.
  ForEach ($LAWorkspace In $ArrayLAWorkspaces) {
    $LAWorkspaceId=$LAWorkspace.workspaceId
    $LAAgentId=$LAWorkspace.AgentId
    $LAWorkspaceTypeCode=$LAWorkspace.AzureCloudType
    Switch ($LAWorkspaceTypeCode) {
      "0" {$LAWorkspaceType="Azure Commercial"; BREAK}
      "1" {$LAWorkspaceType="Azure US Government"; BREAK}
      "2" {$LAWorkspaceType="Azure China"; BREAK}
      "3" {$LAWorkspaceType="Azure US Nat"; BREAK}
      "4" {$LAWorkspaceType="Azure US Sec"; BREAK}
      Default {$LAWorkspaceType=$LAWorkspaceTypeCode
      $script:Message+="[WARNING] Found new Log Analytics workspace type ($LAWorkspaceType).`r"
      $script:CountWarning+=1 # Increment warning counter so we can raise an alert to update the script.
      }
    }
    $Script:varName="LAWorkspaceType"; CheckNull $LAWorkspaceType # Expect a value so check it.
    $Script:varName="LAWorkspaceId"; CheckNull $LAWorkspaceId # Expect a value so check it.
    $Script:varName="LAAgentId"; CheckNull $LAAgentId # Expect a value so check it.
    $LAWorkspaces+="Type=" + $LAWorkspaceType + ",WorkSpaceId=" + $LAWorkspaceId + ",AgentId=" + $LAAgentId + ";"
  }
  $LAWorkspaces=$LAWorkspaces.TrimEnd(";")
} Else {
$LAWorkspaces="None"
}

# Log Analytics - this shows if the agent uses a proxy server to connect to Log Analytics.
$LAProxyUrl=$AgentConfig.proxyUrl
If ([string]::IsNullOrEmpty($LAProxyUrl)) {
$LAProxyUrl="None"
}

# Log Analytics - this is the account used to authenticate to the proxy server.
$LAProxyUsername=$AgentConfig.proxyUsername
If ([string]::IsNullOrEmpty($LAProxyUsername)) {
$LAProxyUsername="None"
}

# Get machine type.
$ComputerTypeRegKey="HKLM:HARDWARE\DESCRIPTION\System"
If (Test-Path $ComputerTypeRegKey) {
$FlattenComputerType=(Get-ItemProperty $ComputerTypeRegKey).SystemBiosVersion -Join "," # This flattens the multi-line string so we can trim it neatly.
$ComputerType=$FlattenComputerType.Substring(0, 6) # This gets the first 6 characters of the flattened string which is usually enough to id the machine type.
If ($ComputerType | Select-String -Pattern "INTEL") {
$ComputerType="Virtual (VMware)"} ElseIf ($ComputerType | Select-String -Pattern "VRTUAL") {
$ComputerType="Virtual (Hyper-V)"} ElseIf ($ComputerType | Select-String -Pattern "Cisco") {
$ComputerType="Physical (Unknown type)"} ElseIf ($ComputerType | Select-String -Pattern "lenovo") {
$ComputerType="Physical (IBM)"} ElseIf ($ComputerType | Select-String -Pattern "VBOX") {
$ComputerType="Virtual (VirtualBox)"} Else {
$ComputerType=$ComputerType
$script:Message+="[WARNING] Found new computer type ($ComputerType).`r"
$script:CountWarning+=1 # Increment warning counter so we can raise an alert to update the script.
}}
$Script:varName="ComputerType"
CheckNull $ComputerType # Expect a value so check it.

<# FOR TESTING
write-host "OperatingSystem: $OperatingSystem"
Write-host "InstallDirectory: $InstallDirectory"
Write-host "AgentVersion: $AgentVersion"
Write-host "LastUpdated: $LastUpdated"
Write-host "HealthServiceLogOn: $HealthServiceLogOn"
write-host "CertificateExpiry: $CertificateExpiry"
write-host "ManagementGroups: $ManagementGroups"
write-host "ADIntegration: $ADIntegration"
write-host "APMService: $APMService"
write-host "ACSAgentService: $ACSAgentService"
write-host "LAWorkspaces: $LAWorkspaces"
write-host "LAProxyUrl: $LAProxyUrl"
write-host "LAProxyUsername: $LAProxyUsername"
write-host "ComputerType: $ComputerType"
Write-Host "PSVersion: $PSVersion" # Not returned as discovery data. Only used in events.
#>

# Add discovery data
$Instance=$DiscoveryData.CreateClassInstance("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']$")
$Instance.AddProperty("$MPElement[Name='Windows!Microsoft.Windows.Computer']/PrincipalName$", $ComputerName)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/OperatingSystem$", $OperatingSystem)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/AgentVersion$", $AgentVersion)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/InstallDirectory$", $InstallDirectory)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/LastUpdated$", $LastUpdated)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/HealthServiceLogOn$", $HealthServiceLogOn)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/CertificateExpiry$", $CertificateExpiry)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/ManagementGroups$", $ManagementGroups)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/ADIntegration$", $ADIntegration)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/APMService$", $APMService)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/ACSAgentService$", $ACSAgentService)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/LAWorkspaces$", $LAWorkspaces)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/LAProxyUrl$", $LAProxyUrl)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/LAProxyUsername$", $LAProxyUsername)
$Instance.AddProperty("$MPElement[Name='TestB.SCOM.Inventory.WindowsAgent.Class']/ComputerType$", $ComputerType)
$Instance.AddProperty("$MPElement[Name='System!System.Entity']/DisplayName$", $ComputerName)
$DiscoveryData.AddInstance($Instance)

# Submit discovery data back to Operations Manager and complete the script.
$DiscoveryData

<# FOR TESTING
$MomApi.Return($DiscoveryData)
#>
LogAndQuit
}
GetAgentInventory -SourceId $SourceId -ManagedEntityId $ManagedEntityId -ComputerName $ComputerName # Need this to pass params in properly.
]]>
          </ScriptBody>
          <Parameters>
            <Parameter>
              <Name>SourceID</Name>
              <Value>$MPElement$</Value>
            </Parameter>
            <Parameter>
              <Name>ManagedEntityID</Name>
              <Value>$Target/Id$</Value>
            </Parameter>
            <Parameter>
              <Name>ComputerName</Name>
              <Value>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</Value>
            </Parameter>
          </Parameters>
          <TimeoutSeconds>120</TimeoutSeconds>
        </DataSource>
      </Discovery>
    </Discoveries>

    <!--Rules-->

    <!--Tasks-->
    <Tasks>
      <Task ID="Company.AppName.TaskName.Task" Accessibility="Public" Enabled="true" Target="TestB.SCOM.Inventory.Base.Class" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Company.AppName.TaskName.Task.WA">
          <TimeoutSeconds>180</TimeoutSeconds>
        </WriteAction>
      </Task>
      <Task ID="Company.AppName.TaskName.Task.agent" Accessibility="Public" Enabled="true" Target="TestB.SCOM.Inventory.WindowsAgent.Class" Timeout="120" Remotable="true">
        <Category>Custom</Category>
        <WriteAction ID="PSWA" TypeID="Company.AppName.TaskName.Task.WA">
          <TimeoutSeconds>180</TimeoutSeconds>
        </WriteAction>
      </Task>
    </Tasks>

    <!--Monitors-->
    <Monitors>
      <UnitMonitor ID="TestB.SCOM.Inventory.Monitoring.EventMonitor" Accessibility="Public" Enabled="true" Target="TestB.SCOM.Inventory.WindowsAgent.Class" ParentMonitorID="Health!System.Health.ConfigurationState" Remotable="true" Priority="Normal" TypeID="Windows!Microsoft.Windows.2SingleEventLog2StateMonitorType" ConfirmDelivery="true">
        <Category>Custom</Category>
        <AlertSettings AlertMessage="TestB.SCOM.Inventory.Monitoring.EventMonitor.AlertMessage">
          <AlertOnState>Warning</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Low</AlertPriority>
          <AlertSeverity>Warning</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/EventDescription$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="OpsStateWarning" MonitorTypeStateID="FirstEventRaised" HealthState="Warning" />
          <OperationalState ID="OpsStateHealthy" MonitorTypeStateID="SecondEventRaised" HealthState="Success" />
        </OperationalStates>
        <Configuration>
          <FirstComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</FirstComputerName>
          <FirstLogName>Operations Manager</FirstLogName>
          <FirstExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">17611</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Health Service Script</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </FirstExpression>
          <SecondComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</SecondComputerName>
          <SecondLogName>Operations Manager</SecondLogName>
          <SecondExpression>
            <And>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="UnsignedInteger">EventDisplayNumber</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="UnsignedInteger">17610</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="String">PublisherName</XPathQuery>
                  </ValueExpression>
                  <Operator>Equal</Operator>
                  <ValueExpression>
                    <Value Type="String">Health Service Script</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </And>
          </SecondExpression>
        </Configuration>
      </UnitMonitor>
    </Monitors>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="TestB.SCOM.Inventory.Monitoring.EventMonitor.AlertMessage" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <!--management pack-->
        <DisplayString ElementID="TestB.SCOM.Inventory.Monitoring">
          <Name>TestB SCOM Inventory (Monitoring)</Name>
          <Description>Scripts and utilities that collect inventory information about the SCOM management group. Created by the Workplace and Mobility monitoring team.</Description>
        </DisplayString>
        <!--windows agent class-->
        <DisplayString ElementID="TestB.SCOM.Inventory.Base.Class">
          <Name>TestB SCOM Inventory Base</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class">
          <Name>TestB SCOM Inventory Windows Agent</Name>
          <Description></Description>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="OperatingSystem">
          <Name>Operating System</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="AgentVersion">
          <Name>Agent Version</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="InstallDirectory">
          <Name>Install Directory</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="LastUpdated">
          <Name>Last Updated</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="HealthServiceLogOn">
          <Name>HealthService Log On</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="CertificateExpiry">
          <Name>Certificate Expiry</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="ManagementGroups">
          <Name>Management Groups</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="ADIntegration">
          <Name>AD Integration</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="APMService">
          <Name>APM Service</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="ACSAgentService">
          <Name>ACS Agent Service</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="LAWorkspaces">
          <Name>LA Workspaces</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="LAProxyUrl">
          <Name>LA ProxyUrl</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="LAProxyUsername">
          <Name>LA Proxy Username</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.Class" SubElementID="ComputerType">
          <Name>Computer Type</Name>
        </DisplayString>
        <!--agent discovery-->
        <DisplayString ElementID="TestB.SCOM.Inventory.WindowsAgent.ScriptDiscovery">
          <Name>TestB SCOM Inventory Windows Agent Discovery</Name>
          <Description>redo? - PowerShell script that get properties of 'SCOM.Inventory.WindowsAgent.Class'.</Description>
        </DisplayString>
        <!--agent script monitor-->
        <DisplayString ElementID="TestB.SCOM.Inventory.Monitoring.EventMonitor">
          <Name>Test - SCOM Inventory script had errors</Name>
          <Description>add later</Description>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.Monitoring.EventMonitor" SubElementID="OpsStateHealthy">
          <Name>Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.Monitoring.EventMonitor" SubElementID="OpsStateWarning">
          <Name>Missing Event Raised</Name>
        </DisplayString>
        <DisplayString ElementID="TestB.SCOM.Inventory.Monitoring.EventMonitor.AlertMessage">
          <Name>Test Alert - SCOM Inventory script had errors</Name>
          <Description>{0}</Description>
        </DisplayString>
        <DisplayString ElementID="Company.AppName.TaskName.Task">
          <Name>Get LA Workspaces - base</Name>
        </DisplayString>
        <DisplayString ElementID="Company.AppName.TaskName.Task.agent">
          <Name>Get LA Workspaces - agent</Name>
        </DisplayString>
      </DisplayStrings>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>